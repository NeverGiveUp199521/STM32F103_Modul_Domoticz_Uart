
STM32F103_Modul_Domoticz_V2.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  080029b0  080029b0  000129b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bc0  08002bc0  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08002bc0  08002bc0  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bc0  08002bc0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bc4  08002bc4  00012bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08002bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001dc  08002da4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08002da4  00020434  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b004  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f7e  00000000  00000000  0002b209  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a28  00000000  00000000  0002d188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  0002dbb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002827  00000000  00000000  0002e4d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a230  00000000  00000000  00030cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00083bbb  00000000  00000000  0003af2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000beaea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bec  00000000  00000000  000beb68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002998 	.word	0x08002998

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08002998 	.word	0x08002998

0800014c <RB_Read>:
 *  Created on: Nov 2, 2020
 *      Author: Pawel
 */
#include "Ring_Buffer.h"
RB_Status RB_Read(RingBuffer *rb, uint8_t *value)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	if(rb->Head == rb->Tail)return RB_ERROR;
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	781a      	ldrb	r2, [r3, #0]
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	785b      	ldrb	r3, [r3, #1]
 800015e:	429a      	cmp	r2, r3
 8000160:	d101      	bne.n	8000166 <RB_Read+0x1a>
 8000162:	2301      	movs	r3, #1
 8000164:	e015      	b.n	8000192 <RB_Read+0x46>
	*value = rb->Buffer[rb->Tail];
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	785b      	ldrb	r3, [r3, #1]
 800016a:	461a      	mov	r2, r3
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	789a      	ldrb	r2, [r3, #2]
 8000172:	683b      	ldr	r3, [r7, #0]
 8000174:	701a      	strb	r2, [r3, #0]
	rb->Tail = (rb->Tail + 1 ) % RING_BUFFER_SIZE;
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	785b      	ldrb	r3, [r3, #1]
 800017a:	3301      	adds	r3, #1
 800017c:	425a      	negs	r2, r3
 800017e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000182:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000186:	bf58      	it	pl
 8000188:	4253      	negpl	r3, r2
 800018a:	b2da      	uxtb	r2, r3
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	705a      	strb	r2, [r3, #1]
	return RB_OK;
 8000190:	2300      	movs	r3, #0
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <RB_Write>:
RB_Status RB_Write(RingBuffer *rb, uint8_t value)
{
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
 80001a4:	460b      	mov	r3, r1
 80001a6:	70fb      	strb	r3, [r7, #3]
	uint8_t TmpHead = (rb->Head + 1 ) % RING_BUFFER_SIZE;
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	3301      	adds	r3, #1
 80001ae:	425a      	negs	r2, r3
 80001b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80001b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80001b8:	bf58      	it	pl
 80001ba:	4253      	negpl	r3, r2
 80001bc:	73fb      	strb	r3, [r7, #15]

	if(TmpHead == rb->Tail)return RB_ERROR;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	785b      	ldrb	r3, [r3, #1]
 80001c2:	7bfa      	ldrb	r2, [r7, #15]
 80001c4:	429a      	cmp	r2, r3
 80001c6:	d101      	bne.n	80001cc <RB_Write+0x30>
 80001c8:	2301      	movs	r3, #1
 80001ca:	e00a      	b.n	80001e2 <RB_Write+0x46>

	rb->Buffer[rb->Head] = value;
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	461a      	mov	r2, r3
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4413      	add	r3, r2
 80001d6:	78fa      	ldrb	r2, [r7, #3]
 80001d8:	709a      	strb	r2, [r3, #2]
	rb->Head = TmpHead;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	7bfa      	ldrb	r2, [r7, #15]
 80001de:	701a      	strb	r2, [r3, #0]
	return RB_OK;
 80001e0:	2300      	movs	r3, #0
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	3714      	adds	r7, #20
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr

080001ec <UARTDMA_UartIrqHandler>:
//
//	UART IDLE interrupt handler
//		Put into USARTx_IRQHandler in user code section
//
void UARTDMA_UartIrqHandler(UARTDMA_HandlerTypeDef *huartdma)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
	if(huartdma->huart->Instance->SR & UART_FLAG_IDLE)       // Check if Idle flag is set
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	f003 0310 	and.w	r3, r3, #16
 8000200:	2b00      	cmp	r3, #0
 8000202:	d017      	beq.n	8000234 <UARTDMA_UartIrqHandler+0x48>
	{
		volatile uint32_t tmp;
		tmp = huartdma->huart->Instance->SR;                      // Read status register
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	60fb      	str	r3, [r7, #12]
		tmp = huartdma->huart->Instance->DR;                      // Read data register
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	685b      	ldr	r3, [r3, #4]
 8000216:	60fb      	str	r3, [r7, #12]

		huartdma->huart->hdmarx->Instance->CCR &= ~DMA_CCR_EN;// Disable DMA - it will force Transfer Complete interrupt if it's enabled
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	681a      	ldr	r2, [r3, #0]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f022 0201 	bic.w	r2, r2, #1
 800022e:	601a      	str	r2, [r3, #0]

		tmp = tmp; // For unused warning
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	60fb      	str	r3, [r7, #12]
	}
}
 8000234:	bf00      	nop
 8000236:	3714      	adds	r7, #20
 8000238:	46bd      	mov	sp, r7
 800023a:	bc80      	pop	{r7}
 800023c:	4770      	bx	lr

0800023e <UARTDMA_DmaReceiveIrqHandler>:
//
//	DMA Receive interrupt handler
//		Put into DMA Stream Rx IRQHandler in first user code section. End with return;
//
void UARTDMA_DmaReceiveIrqHandler(UARTDMA_HandlerTypeDef *huartdma)
{
 800023e:	b580      	push	{r7, lr}
 8000240:	b086      	sub	sp, #24
 8000242:	af00      	add	r7, sp, #0
 8000244:	6078      	str	r0, [r7, #4]
	uint8_t *DmaBufferPointer;
	uint16_t i;
	uint16_t Length;	// Message length

	DMA_Base_Registers *DmaRegisters = (DMA_Base_Registers *) huartdma->huart->hdmarx->DmaBaseAddress; // Take registers base address // Take registers base address
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800024c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800024e:	613b      	str	r3, [r7, #16]

	if (__HAL_DMA_GET_IT_SOURCE(huartdma->huart->hdmarx, DMA_IT_TC) != RESET) // Check if interrupt source is Transfer Complete
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f003 0302 	and.w	r3, r3, #2
 800025e:	2b02      	cmp	r3, #2
 8000260:	d156      	bne.n	8000310 <UARTDMA_DmaReceiveIrqHandler+0xd2>
	{
		DmaRegisters->IFCR = DMA_IFCR_CTCIF1 << huartdma->huart->hdmarx->ChannelIndex;	// Clear Transfer Complete flag
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800026a:	2202      	movs	r2, #2
 800026c:	409a      	lsls	r2, r3
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	609a      	str	r2, [r3, #8]

		Length = DMA_RX_BUFFER_SIZE - huartdma->huart->hdmarx->Instance->CNDTR; // Get the Length of transfered data
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	b29b      	uxth	r3, r3
 800027e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8000282:	81fb      	strh	r3, [r7, #14]

		DmaBufferPointer = 	huartdma->DMA_RX_Buffer;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	3304      	adds	r3, #4
 8000288:	60bb      	str	r3, [r7, #8]

		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 800028a:	2300      	movs	r3, #0
 800028c:	82fb      	strh	r3, [r7, #22]
 800028e:	e01a      	b.n	80002c6 <UARTDMA_DmaReceiveIrqHandler+0x88>
		{
			RB_Write(&huartdma->UART_RX_Buffer, DmaBufferPointer[i]);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8000296:	8afb      	ldrh	r3, [r7, #22]
 8000298:	68ba      	ldr	r2, [r7, #8]
 800029a:	4413      	add	r3, r2
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	4619      	mov	r1, r3
 80002a0:	f7ff ff7c 	bl	800019c <RB_Write>

			if(DmaBufferPointer[i] == '\n')
 80002a4:	8afb      	ldrh	r3, [r7, #22]
 80002a6:	68ba      	ldr	r2, [r7, #8]
 80002a8:	4413      	add	r3, r2
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b0a      	cmp	r3, #10
 80002ae:	d107      	bne.n	80002c0 <UARTDMA_DmaReceiveIrqHandler+0x82>
			{
				huartdma->UartRxBufferLines++;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80002b6:	3301      	adds	r3, #1
 80002b8:	b2da      	uxtb	r2, r3
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
		for(i = 0; i < Length; i++) // Write all bytes into Ring Buffer
 80002c0:	8afb      	ldrh	r3, [r7, #22]
 80002c2:	3301      	adds	r3, #1
 80002c4:	82fb      	strh	r3, [r7, #22]
 80002c6:	8afa      	ldrh	r2, [r7, #22]
 80002c8:	89fb      	ldrh	r3, [r7, #14]
 80002ca:	429a      	cmp	r2, r3
 80002cc:	d3e0      	bcc.n	8000290 <UARTDMA_DmaReceiveIrqHandler+0x52>
			}
		}

		DmaRegisters->IFCR = 0x0FU << huartdma->huart->hdmarx->ChannelIndex; 		// Clear all interrupts
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d6:	220f      	movs	r2, #15
 80002d8:	409a      	lsls	r2, r3
 80002da:	693b      	ldr	r3, [r7, #16]
 80002dc:	609a      	str	r2, [r3, #8]
				huartdma->huart->hdmarx->Instance->CMAR = (uint32_t) huartdma->DMA_RX_Buffer; // Set memory address for DMA again
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	1d1a      	adds	r2, r3, #4
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	60da      	str	r2, [r3, #12]
				huartdma->huart->hdmarx->Instance->CNDTR = DMA_RX_BUFFER_SIZE; // Set number of bytes to receive
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2240      	movs	r2, #64	; 0x40
 80002f6:	605a      	str	r2, [r3, #4]
				huartdma->huart->hdmarx->Instance->CCR |= DMA_CCR_EN;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f042 0201 	orr.w	r2, r2, #1
 800030e:	601a      	str	r2, [r3, #0]
	}
}
 8000310:	bf00      	nop
 8000312:	3718      	adds	r7, #24
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <UARTDMA_PutCharToTxBuffer>:

//
//	Put one char to UART Transmit buffer
//
int UARTDMA_PutCharToTxBuffer(UARTDMA_HandlerTypeDef *huartdma, char c)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	460b      	mov	r3, r1
 8000322:	70fb      	strb	r3, [r7, #3]

	if(RB_OK != RB_Write(&huartdma->UART_TX_Buffer, c)) // Check if put to Ring Buffer ended with success
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	33c7      	adds	r3, #199	; 0xc7
 8000328:	78fa      	ldrb	r2, [r7, #3]
 800032a:	4611      	mov	r1, r2
 800032c:	4618      	mov	r0, r3
 800032e:	f7ff ff35 	bl	800019c <RB_Write>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <UARTDMA_PutCharToTxBuffer+0x24>
	{
		return 1; // Error code
 8000338:	2301      	movs	r3, #1
 800033a:	e000      	b.n	800033e <UARTDMA_PutCharToTxBuffer+0x26>
	}
	return 0; // Success code
 800033c:	2300      	movs	r3, #0
}
 800033e:	4618      	mov	r0, r3
 8000340:	3708      	adds	r7, #8
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <UARTDMA_Print>:

//
// Put message to UART buffer. It will be send with UARTDMA_TransmitEvent
//
void UARTDMA_Print(UARTDMA_HandlerTypeDef *huartdma, char *Message)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	b084      	sub	sp, #16
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
 800034e:	6039      	str	r1, [r7, #0]
	char *MsgPointer; // Helper pointer
	char CharToPut; // Current char to print
	MsgPointer = (char*)Message; // Set helper pointer
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	60fb      	str	r3, [r7, #12]

	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 8000354:	e012      	b.n	800037c <UARTDMA_Print+0x36>
	{
		UARTDMA_PutCharToTxBuffer(huartdma, CharToPut); // Put current char into transmit buffer
 8000356:	7afb      	ldrb	r3, [r7, #11]
 8000358:	4619      	mov	r1, r3
 800035a:	6878      	ldr	r0, [r7, #4]
 800035c:	f7ff ffdc 	bl	8000318 <UARTDMA_PutCharToTxBuffer>
		MsgPointer++; // Next char
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	3301      	adds	r3, #1
 8000364:	60fb      	str	r3, [r7, #12]

		if(CharToPut == '\n') // Check if end line byte occurs
 8000366:	7afb      	ldrb	r3, [r7, #11]
 8000368:	2b0a      	cmp	r3, #10
 800036a:	d107      	bne.n	800037c <UARTDMA_Print+0x36>
		{
			huartdma->UartTxBufferLines++; // Increment line to transmit counter
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 8000372:	3301      	adds	r3, #1
 8000374:	b2da      	uxtb	r2, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
	while((CharToPut = *MsgPointer)) // Go through whole Message - till '\0' byte
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	72fb      	strb	r3, [r7, #11]
 8000382:	7afb      	ldrb	r3, [r7, #11]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d1e6      	bne.n	8000356 <UARTDMA_Print+0x10>
		}
	}
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}

08000390 <UARTDMA_IsDataReceivedReady>:

//
// Check if received data are ready
//
uint8_t UARTDMA_IsDataReceivedReady(UARTDMA_HandlerTypeDef *huartdma)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	if(huartdma->UartRxBufferLines)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <UARTDMA_IsDataReceivedReady+0x16>
		return 1; // At least one line is available
 80003a2:	2301      	movs	r3, #1
 80003a4:	e000      	b.n	80003a8 <UARTDMA_IsDataReceivedReady+0x18>
	else
		return 0; // No lines are available
 80003a6:	2300      	movs	r3, #0
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr

080003b2 <UARTDMA_TransmitEvent>:
//
//	UART Transmit interrupt handler
//		Put in main loop
//
void UARTDMA_TransmitEvent(UARTDMA_HandlerTypeDef *huartdma)
{
 80003b2:	b580      	push	{r7, lr}
 80003b4:	b084      	sub	sp, #16
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
	char CharToSend; // Current char to transmit
	uint16_t i = 0; // Iterator
 80003ba:	2300      	movs	r3, #0
 80003bc:	81fb      	strh	r3, [r7, #14]

	if(huartdma->huart->hdmatx->State != HAL_DMA_STATE_BUSY) // If DMA is ready to transmit
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d027      	beq.n	800041c <UARTDMA_TransmitEvent+0x6a>
	{
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80003cc:	e013      	b.n	80003f6 <UARTDMA_TransmitEvent+0x44>
		{
			if(CharToSend == '\n') // Check end line byte
 80003ce:	7b7b      	ldrb	r3, [r7, #13]
 80003d0:	2b0a      	cmp	r3, #10
 80003d2:	d107      	bne.n	80003e4 <UARTDMA_TransmitEvent+0x32>
			{
				huartdma->UartTxBufferLines--; // Decrease lines (may be delete because it is no more used)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f893 3109 	ldrb.w	r3, [r3, #265]	; 0x109
 80003da:	3b01      	subs	r3, #1
 80003dc:	b2da      	uxtb	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f883 2109 	strb.w	r2, [r3, #265]	; 0x109
			}

			huartdma->DMA_TX_Buffer[i++] = CharToSend; // Put this char into DMA buffer
 80003e4:	89fb      	ldrh	r3, [r7, #14]
 80003e6:	1c5a      	adds	r2, r3, #1
 80003e8:	81fa      	strh	r2, [r7, #14]
 80003ea:	4619      	mov	r1, r3
 80003ec:	7b7a      	ldrb	r2, [r7, #13]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	440b      	add	r3, r1
 80003f2:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
		while(RB_OK == RB_Read(&huartdma->UART_TX_Buffer, (uint8_t*)&CharToSend)) // If there is something to transfer
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	33c7      	adds	r3, #199	; 0xc7
 80003fa:	f107 020d 	add.w	r2, r7, #13
 80003fe:	4611      	mov	r1, r2
 8000400:	4618      	mov	r0, r3
 8000402:	f7ff fea3 	bl	800014c <RB_Read>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0e0      	beq.n	80003ce <UARTDMA_TransmitEvent+0x1c>
		}

		HAL_UART_Transmit_DMA(huartdma->huart, huartdma->DMA_TX_Buffer, i); // Push DMA buffer to UART
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	6818      	ldr	r0, [r3, #0]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3387      	adds	r3, #135	; 0x87
 8000414:	89fa      	ldrh	r2, [r7, #14]
 8000416:	4619      	mov	r1, r3
 8000418:	f001 fe6e 	bl	80020f8 <HAL_UART_Transmit_DMA>
	}
}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <UARTDMA_Init>:

//
// Initialization
//
void UARTDMA_Init(UARTDMA_HandlerTypeDef *huartdma, UART_HandleTypeDef *huart)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
 800042c:	6039      	str	r1, [r7, #0]
	huartdma->huart = huart;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	683a      	ldr	r2, [r7, #0]
 8000432:	601a      	str	r2, [r3, #0]

	// IDLE Enable
	__HAL_UART_ENABLE_IT(huartdma->huart, UART_IT_IDLE);   	// UART Idle Line interrupt
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	68da      	ldr	r2, [r3, #12]
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	f042 0210 	orr.w	r2, r2, #16
 8000446:	60da      	str	r2, [r3, #12]

	// DMA TC Enable
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmarx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f042 0202 	orr.w	r2, r2, #2
 800045e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE_IT(huartdma->huart->hdmatx, DMA_IT_TC); // UART DMA Transfer Complete interrupt
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	681a      	ldr	r2, [r3, #0]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f042 0202 	orr.w	r2, r2, #2
 8000476:	601a      	str	r2, [r3, #0]

	// Run DMA UART on Buffer RX

	HAL_UART_Receive_DMA(huartdma->huart, huartdma->DMA_RX_Buffer, DMA_RX_BUFFER_SIZE); // Run DMA for whole DMA buffer
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	6818      	ldr	r0, [r3, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	3304      	adds	r3, #4
 8000480:	2240      	movs	r2, #64	; 0x40
 8000482:	4619      	mov	r1, r3
 8000484:	f001 fea4 	bl	80021d0 <HAL_UART_Receive_DMA>

	// DMA HT Disable
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmarx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f022 0204 	bic.w	r2, r2, #4
 800049e:	601a      	str	r2, [r3, #0]
	__HAL_DMA_DISABLE_IT(huartdma->huart->hdmatx, DMA_IT_HT); // UART DMA Half Transfer Complete interrupt
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	681a      	ldr	r2, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	f022 0204 	bic.w	r2, r2, #4
 80004b6:	601a      	str	r2, [r3, #0]
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c6:	4b10      	ldr	r3, [pc, #64]	; (8000508 <MX_DMA_Init+0x48>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a0f      	ldr	r2, [pc, #60]	; (8000508 <MX_DMA_Init+0x48>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <MX_DMA_Init+0x48>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f003 0301 	and.w	r3, r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80004de:	2200      	movs	r2, #0
 80004e0:	2100      	movs	r1, #0
 80004e2:	200e      	movs	r0, #14
 80004e4:	f000 fcb5 	bl	8000e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80004e8:	200e      	movs	r0, #14
 80004ea:	f000 fcce 	bl	8000e8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	200f      	movs	r0, #15
 80004f4:	f000 fcad 	bl	8000e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80004f8:	200f      	movs	r0, #15
 80004fa:	f000 fcc6 	bl	8000e8a <HAL_NVIC_EnableIRQ>

}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40021000 	.word	0x40021000

0800050c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b088      	sub	sp, #32
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000520:	4b34      	ldr	r3, [pc, #208]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <MX_GPIO_Init+0xe8>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0310 	and.w	r3, r3, #16
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000538:	4b2e      	ldr	r3, [pc, #184]	; (80005f4 <MX_GPIO_Init+0xe8>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a2d      	ldr	r2, [pc, #180]	; (80005f4 <MX_GPIO_Init+0xe8>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b2b      	ldr	r3, [pc, #172]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0320 	and.w	r3, r3, #32
 800054c:	60bb      	str	r3, [r7, #8]
 800054e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a27      	ldr	r2, [pc, #156]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <MX_GPIO_Init+0xe8>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0308 	and.w	r3, r3, #8
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <MX_GPIO_Init+0xe8>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <MX_GPIO_Init+0xe8>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_GPIO_Init+0xe8>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	603b      	str	r3, [r7, #0]
 800057e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|OUTPUT_1_Pin|OUTPUT_2_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000586:	481c      	ldr	r0, [pc, #112]	; (80005f8 <MX_GPIO_Init+0xec>)
 8000588:	f000 ffe2 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_ESP_GPIO_Port, RESET_ESP_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000592:	481a      	ldr	r0, [pc, #104]	; (80005fc <MX_GPIO_Init+0xf0>)
 8000594:	f000 ffdc 	bl	8001550 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|OUTPUT_1_Pin|OUTPUT_2_Pin;
 8000598:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800059c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059e:	2301      	movs	r3, #1
 80005a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a6:	2302      	movs	r3, #2
 80005a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	4811      	ldr	r0, [pc, #68]	; (80005f8 <MX_GPIO_Init+0xec>)
 80005b2:	f000 fe73 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_ESP_Pin;
 80005b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_ESP_GPIO_Port, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	480b      	ldr	r0, [pc, #44]	; (80005fc <MX_GPIO_Init+0xf0>)
 80005d0:	f000 fe64 	bl	800129c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 80005d4:	2320      	movs	r3, #32
 80005d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 0310 	add.w	r3, r7, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <MX_GPIO_Init+0xf4>)
 80005e8:	f000 fe58 	bl	800129c <HAL_GPIO_Init>

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40011000 	.word	0x40011000
 80005fc:	40010800 	.word	0x40010800
 8000600:	40010c00 	.word	0x40010c00

08000604 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C2_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <MX_I2C2_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C2_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_I2C2_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C2_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C2_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_I2C2_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C2_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_I2C2_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_I2C2_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_I2C2_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_I2C2_Init+0x50>)
 8000642:	f000 ffb7 	bl	80015b4 <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 f91b 	bl	8000886 <Error_Handler>
  }

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000204 	.word	0x20000204
 8000658:	40005800 	.word	0x40005800
 800065c:	000186a0 	.word	0x000186a0

08000660 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b088      	sub	sp, #32
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0310 	add.w	r3, r7, #16
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a16      	ldr	r2, [pc, #88]	; (80006d4 <HAL_I2C_MspInit+0x74>)
 800067c:	4293      	cmp	r3, r2
 800067e:	d124      	bne.n	80006ca <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <HAL_I2C_MspInit+0x78>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <HAL_I2C_MspInit+0x78>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_I2C_MspInit+0x78>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0308 	and.w	r3, r3, #8
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000698:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800069c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800069e:	2312      	movs	r3, #18
 80006a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a2:	2303      	movs	r3, #3
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0310 	add.w	r3, r7, #16
 80006aa:	4619      	mov	r1, r3
 80006ac:	480b      	ldr	r0, [pc, #44]	; (80006dc <HAL_I2C_MspInit+0x7c>)
 80006ae:	f000 fdf5 	bl	800129c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_I2C_MspInit+0x78>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <HAL_I2C_MspInit+0x78>)
 80006b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006bc:	61d3      	str	r3, [r2, #28]
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_I2C_MspInit+0x78>)
 80006c0:	69db      	ldr	r3, [r3, #28]
 80006c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40005800 	.word	0x40005800
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010c00 	.word	0x40010c00

080006e0 <UART_ParseLED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UART_ParseLED()
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	uint8_t LedState; // Received state variable

	char* ParsePointer = strtok(NULL, ","); // Look for next token or end of string
 80006e6:	4925      	ldr	r1, [pc, #148]	; (800077c <UART_ParseLED+0x9c>)
 80006e8:	2000      	movs	r0, #0
 80006ea:	f001 ffd7 	bl	800269c <strtok>
 80006ee:	6078      	str	r0, [r7, #4]
	// Should be now: ParsePointer == 1'\0'

	if(strlen(ParsePointer) > 0) // If string exists
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d03e      	beq.n	8000776 <UART_ParseLED+0x96>
	{
		if(ParsePointer[0] < '0' || ParsePointer[0] > '9') // Chceck if there are only numbers
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b2f      	cmp	r3, #47	; 0x2f
 80006fe:	d903      	bls.n	8000708 <UART_ParseLED+0x28>
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b39      	cmp	r3, #57	; 0x39
 8000706:	d904      	bls.n	8000712 <UART_ParseLED+0x32>
		{
			UARTDMA_Print(&huartdma, "LED wrong value. Don't use letters dude!\r\n"); // Print message
 8000708:	491d      	ldr	r1, [pc, #116]	; (8000780 <UART_ParseLED+0xa0>)
 800070a:	481e      	ldr	r0, [pc, #120]	; (8000784 <UART_ParseLED+0xa4>)
 800070c:	f7ff fe1b 	bl	8000346 <UARTDMA_Print>
			return;	// And exit parsing
 8000710:	e031      	b.n	8000776 <UART_ParseLED+0x96>
		}

		LedState = atoi(ParsePointer); // If there are no chars, change string to integer
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f001 ff8c 	bl	8002630 <atoi>
 8000718:	4603      	mov	r3, r0
 800071a:	70fb      	strb	r3, [r7, #3]

		if(LedState == 1) // LED ON
 800071c:	78fb      	ldrb	r3, [r7, #3]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d10a      	bne.n	8000738 <UART_ParseLED+0x58>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000722:	2201      	movs	r2, #1
 8000724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000728:	4817      	ldr	r0, [pc, #92]	; (8000788 <UART_ParseLED+0xa8>)
 800072a:	f000 ff11 	bl	8001550 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma, "LED On\r\n");
 800072e:	4917      	ldr	r1, [pc, #92]	; (800078c <UART_ParseLED+0xac>)
 8000730:	4814      	ldr	r0, [pc, #80]	; (8000784 <UART_ParseLED+0xa4>)
 8000732:	f7ff fe08 	bl	8000346 <UARTDMA_Print>
 8000736:	e01e      	b.n	8000776 <UART_ParseLED+0x96>
		}
		else if(LedState == 0) // LED OFF
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d10a      	bne.n	8000754 <UART_ParseLED+0x74>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000744:	4810      	ldr	r0, [pc, #64]	; (8000788 <UART_ParseLED+0xa8>)
 8000746:	f000 ff03 	bl	8001550 <HAL_GPIO_WritePin>
			UARTDMA_Print(&huartdma, "LED Off\r\n");
 800074a:	4911      	ldr	r1, [pc, #68]	; (8000790 <UART_ParseLED+0xb0>)
 800074c:	480d      	ldr	r0, [pc, #52]	; (8000784 <UART_ParseLED+0xa4>)
 800074e:	f7ff fdfa 	bl	8000346 <UARTDMA_Print>
 8000752:	e010      	b.n	8000776 <UART_ParseLED+0x96>
		}
		else if(LedState == 3) // LED OFF
 8000754:	78fb      	ldrb	r3, [r7, #3]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d109      	bne.n	800076e <UART_ParseLED+0x8e>
		{
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800075a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <UART_ParseLED+0xa8>)
 8000760:	f000 ff0e 	bl	8001580 <HAL_GPIO_TogglePin>
			UARTDMA_Print(&huartdma, "LED Toggle\r\n");
 8000764:	490b      	ldr	r1, [pc, #44]	; (8000794 <UART_ParseLED+0xb4>)
 8000766:	4807      	ldr	r0, [pc, #28]	; (8000784 <UART_ParseLED+0xa4>)
 8000768:	f7ff fded 	bl	8000346 <UARTDMA_Print>
 800076c:	e003      	b.n	8000776 <UART_ParseLED+0x96>
		}
		else // Wrong state number
		{
			UARTDMA_Print(&huartdma, "LED wrong value. Use 0 or 1.\r\n");
 800076e:	490a      	ldr	r1, [pc, #40]	; (8000798 <UART_ParseLED+0xb8>)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <UART_ParseLED+0xa4>)
 8000772:	f7ff fde8 	bl	8000346 <UARTDMA_Print>
		}
	}
}
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	080029b0 	.word	0x080029b0
 8000780:	080029b4 	.word	0x080029b4
 8000784:	20000258 	.word	0x20000258
 8000788:	40011000 	.word	0x40011000
 800078c:	080029e0 	.word	0x080029e0
 8000790:	080029ec 	.word	0x080029ec
 8000794:	080029f8 	.word	0x080029f8
 8000798:	08002a08 	.word	0x08002a08

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fa1e 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f81e 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f7ff feb0 	bl	800050c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ac:	f7ff fe88 	bl	80004c0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007b0:	f000 f926 	bl	8000a00 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80007b4:	f7ff ff26 	bl	8000604 <MX_I2C2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007b8:	f000 f859 	bl	800086e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  UARTDMA_Init(&huartdma, &huart1);
 80007bc:	4907      	ldr	r1, [pc, #28]	; (80007dc <main+0x40>)
 80007be:	4808      	ldr	r0, [pc, #32]	; (80007e0 <main+0x44>)
 80007c0:	f7ff fe30 	bl	8000424 <UARTDMA_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(UARTDMA_IsDataReceivedReady(&huartdma))
 80007c4:	4806      	ldr	r0, [pc, #24]	; (80007e0 <main+0x44>)
 80007c6:	f7ff fde3 	bl	8000390 <UARTDMA_IsDataReceivedReady>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <main+0x38>
	  	  {
		  UART_ParseLED();
 80007d0:	f7ff ff86 	bl	80006e0 <UART_ParseLED>
	  	  }
	  UARTDMA_TransmitEvent(&huartdma);
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <main+0x44>)
 80007d6:	f7ff fdec 	bl	80003b2 <UARTDMA_TransmitEvent>
	  if(UARTDMA_IsDataReceivedReady(&huartdma))
 80007da:	e7f3      	b.n	80007c4 <main+0x28>
 80007dc:	200003ec 	.word	0x200003ec
 80007e0:	20000258 	.word	0x20000258

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b090      	sub	sp, #64	; 0x40
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0318 	add.w	r3, r7, #24
 80007ee:	2228      	movs	r2, #40	; 0x28
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 ff4a 	bl	800268c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000806:	2301      	movs	r3, #1
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800080a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000822:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fff9 	bl	8001824 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000838:	f000 f825 	bl	8000886 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000840:	2302      	movs	r3, #2
 8000842:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2102      	movs	r1, #2
 8000856:	4618      	mov	r0, r3
 8000858:	f001 fa64 	bl	8001d24 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000862:	f000 f810 	bl	8000886 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3740      	adds	r7, #64	; 0x40
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}

0800086e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800086e:	b580      	push	{r7, lr}
 8000870:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	2025      	movs	r0, #37	; 0x25
 8000878:	f000 faeb 	bl	8000e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800087c:	2025      	movs	r0, #37	; 0x25
 800087e:	f000 fb04 	bl	8000e8a <HAL_NVIC_EnableIRQ>
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}

08000886 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	bc80      	pop	{r7}
 8000890:	4770      	bx	lr
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <HAL_MspInit+0x5c>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <HAL_MspInit+0x5c>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6193      	str	r3, [r2, #24]
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <HAL_MspInit+0x5c>)
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <HAL_MspInit+0x5c>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_MspInit+0x5c>)
 80008b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <HAL_MspInit+0x5c>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_MspInit+0x60>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <HAL_MspInit+0x60>)
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40021000 	.word	0x40021000
 80008f4:	40010000 	.word	0x40010000

080008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <HardFault_Handler+0x4>

0800090a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <MemManage_Handler+0x4>

08000910 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <BusFault_Handler+0x4>

08000916 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <UsageFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr

08000934 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f992 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	bd80      	pop	{r7, pc}

0800094c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <DMA1_Channel4_IRQHandler+0x10>)
 8000952:	f000 fb6f 	bl	8001034 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000364 	.word	0x20000364

08000960 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	UARTDMA_DmaReceiveIrqHandler(&huartdma);
 8000964:	4802      	ldr	r0, [pc, #8]	; (8000970 <DMA1_Channel5_IRQHandler+0x10>)
 8000966:	f7ff fc6a 	bl	800023e <UARTDMA_DmaReceiveIrqHandler>
	return;
 800096a:	bf00      	nop
  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000258 	.word	0x20000258

08000974 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	UARTDMA_UartIrqHandler(&huartdma);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <USART1_IRQHandler+0x10>)
 800097a:	f7ff fc37 	bl	80001ec <UARTDMA_UartIrqHandler>
	 return;
 800097e:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000258 	.word	0x20000258

08000988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <_sbrk+0x5c>)
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <_sbrk+0x60>)
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <_sbrk+0x64>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d102      	bne.n	80009aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <_sbrk+0x64>)
 80009a6:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <_sbrk+0x68>)
 80009a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <_sbrk+0x64>)
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4413      	add	r3, r2
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d207      	bcs.n	80009c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009b8:	f001 fe3e 	bl	8002638 <__errno>
 80009bc:	4602      	mov	r2, r0
 80009be:	230c      	movs	r3, #12
 80009c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009c2:	f04f 33ff 	mov.w	r3, #4294967295
 80009c6:	e009      	b.n	80009dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <_sbrk+0x64>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <_sbrk+0x64>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4413      	add	r3, r2
 80009d6:	4a05      	ldr	r2, [pc, #20]	; (80009ec <_sbrk+0x64>)
 80009d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009da:	68fb      	ldr	r3, [r7, #12]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20005000 	.word	0x20005000
 80009e8:	00000400 	.word	0x00000400
 80009ec:	200001f8 	.word	0x200001f8
 80009f0:	20000438 	.word	0x20000438

080009f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	; (8000a50 <MX_USART1_UART_Init+0x50>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a0a:	4b10      	ldr	r3, [pc, #64]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <MX_USART1_UART_Init+0x4c>)
 8000a38:	f001 fb10 	bl	800205c <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a42:	f7ff ff20 	bl	8000886 <Error_Handler>
  }

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	200003ec 	.word	0x200003ec
 8000a50:	40013800 	.word	0x40013800

08000a54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a42      	ldr	r2, [pc, #264]	; (8000b78 <HAL_UART_MspInit+0x124>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d17d      	bne.n	8000b70 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a74:	4b41      	ldr	r3, [pc, #260]	; (8000b7c <HAL_UART_MspInit+0x128>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a40      	ldr	r2, [pc, #256]	; (8000b7c <HAL_UART_MspInit+0x128>)
 8000a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b3e      	ldr	r3, [pc, #248]	; (8000b7c <HAL_UART_MspInit+0x128>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b3b      	ldr	r3, [pc, #236]	; (8000b7c <HAL_UART_MspInit+0x128>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a3a      	ldr	r2, [pc, #232]	; (8000b7c <HAL_UART_MspInit+0x128>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <HAL_UART_MspInit+0x128>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0310 	add.w	r3, r7, #16
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4831      	ldr	r0, [pc, #196]	; (8000b80 <HAL_UART_MspInit+0x12c>)
 8000aba:	f000 fbef 	bl	800129c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	482b      	ldr	r0, [pc, #172]	; (8000b80 <HAL_UART_MspInit+0x12c>)
 8000ad4:	f000 fbe2 	bl	800129c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <HAL_UART_MspInit+0x130>)
 8000ada:	4a2b      	ldr	r2, [pc, #172]	; (8000b88 <HAL_UART_MspInit+0x134>)
 8000adc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ade:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <HAL_UART_MspInit+0x130>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ae4:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <HAL_UART_MspInit+0x130>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000aea:	4b26      	ldr	r3, [pc, #152]	; (8000b84 <HAL_UART_MspInit+0x130>)
 8000aec:	2280      	movs	r2, #128	; 0x80
 8000aee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000af0:	4b24      	ldr	r3, [pc, #144]	; (8000b84 <HAL_UART_MspInit+0x130>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <HAL_UART_MspInit+0x130>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <HAL_UART_MspInit+0x130>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <HAL_UART_MspInit+0x130>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b08:	481e      	ldr	r0, [pc, #120]	; (8000b84 <HAL_UART_MspInit+0x130>)
 8000b0a:	f000 f9d9 	bl	8000ec0 <HAL_DMA_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000b14:	f7ff feb7 	bl	8000886 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <HAL_UART_MspInit+0x130>)
 8000b1c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b1e:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <HAL_UART_MspInit+0x130>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000b24:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <HAL_UART_MspInit+0x138>)
 8000b26:	4a1a      	ldr	r2, [pc, #104]	; (8000b90 <HAL_UART_MspInit+0x13c>)
 8000b28:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <HAL_UART_MspInit+0x138>)
 8000b2c:	2210      	movs	r2, #16
 8000b2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <HAL_UART_MspInit+0x138>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <HAL_UART_MspInit+0x138>)
 8000b38:	2280      	movs	r2, #128	; 0x80
 8000b3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <HAL_UART_MspInit+0x138>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_UART_MspInit+0x138>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_UART_MspInit+0x138>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_UART_MspInit+0x138>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <HAL_UART_MspInit+0x138>)
 8000b56:	f000 f9b3 	bl	8000ec0 <HAL_DMA_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000b60:	f7ff fe91 	bl	8000886 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <HAL_UART_MspInit+0x138>)
 8000b68:	631a      	str	r2, [r3, #48]	; 0x30
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_UART_MspInit+0x138>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40013800 	.word	0x40013800
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40010800 	.word	0x40010800
 8000b84:	200003a8 	.word	0x200003a8
 8000b88:	40020058 	.word	0x40020058
 8000b8c:	20000364 	.word	0x20000364
 8000b90:	40020044 	.word	0x40020044

08000b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b96:	e003      	b.n	8000ba0 <LoopCopyDataInit>

08000b98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b98:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b9e:	3104      	adds	r1, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ba0:	480a      	ldr	r0, [pc, #40]	; (8000bcc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ba4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ba6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ba8:	d3f6      	bcc.n	8000b98 <CopyDataInit>
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000bac:	e002      	b.n	8000bb4 <LoopFillZerobss>

08000bae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000bb0:	f842 3b04 	str.w	r3, [r2], #4

08000bb4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000bb8:	d3f9      	bcc.n	8000bae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bba:	f7ff ff1b 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f001 fd41 	bl	8002644 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fdeb 	bl	800079c <main>
  bx lr
 8000bc6:	4770      	bx	lr
  ldr r3, =_sidata
 8000bc8:	08002bc8 	.word	0x08002bc8
  ldr r0, =_sdata
 8000bcc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000bd0:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8000bd4:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8000bd8:	20000434 	.word	0x20000434

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x28>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f923 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fe4a 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 f93b 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 f903 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	; (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000000 	.word	0x20000000
 8000c64:	20000008 	.word	0x20000008
 8000c68:	20000004 	.word	0x20000004

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	2000042c 	.word	0x2000042c

08000c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	; (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	2000042c 	.word	0x2000042c

08000ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cba:	68ba      	ldr	r2, [r7, #8]
 8000cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd6:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	60d3      	str	r3, [r2, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <__NVIC_GetPriorityGrouping+0x18>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	f003 0307 	and.w	r3, r3, #7
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db0b      	blt.n	8000d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 021f 	and.w	r2, r3, #31
 8000d20:	4906      	ldr	r1, [pc, #24]	; (8000d3c <__NVIC_EnableIRQ+0x34>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	095b      	lsrs	r3, r3, #5
 8000d28:	2001      	movs	r0, #1
 8000d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff90 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff2d 	bl	8000ca4 <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff42 	bl	8000cec <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff90 	bl	8000d94 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5f 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff35 	bl	8000d08 <__NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffa2 	bl	8000df8 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d101      	bne.n	8000ed6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e043      	b.n	8000f5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <HAL_DMA_Init+0xa8>)
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <HAL_DMA_Init+0xac>)
 8000ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee6:	091b      	lsrs	r3, r3, #4
 8000ee8:	009a      	lsls	r2, r3, #2
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a1f      	ldr	r2, [pc, #124]	; (8000f70 <HAL_DMA_Init+0xb0>)
 8000ef2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2202      	movs	r2, #2
 8000ef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f0a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	bffdfff8 	.word	0xbffdfff8
 8000f6c:	cccccccd 	.word	0xcccccccd
 8000f70:	40020000 	.word	0x40020000

08000f74 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d101      	bne.n	8000f94 <HAL_DMA_Start_IT+0x20>
 8000f90:	2302      	movs	r3, #2
 8000f92:	e04a      	b.n	800102a <HAL_DMA_Start_IT+0xb6>
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2201      	movs	r2, #1
 8000f98:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d13a      	bne.n	800101c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0201 	bic.w	r2, r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	68b9      	ldr	r1, [r7, #8]
 8000fca:	68f8      	ldr	r0, [r7, #12]
 8000fcc:	f000 f938 	bl	8001240 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d008      	beq.n	8000fea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 020e 	orr.w	r2, r2, #14
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e00f      	b.n	800100a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 0204 	bic.w	r2, r2, #4
 8000ff8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f042 020a 	orr.w	r2, r2, #10
 8001008:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f042 0201 	orr.w	r2, r2, #1
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e005      	b.n	8001028 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001024:	2302      	movs	r3, #2
 8001026:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001028:	7dfb      	ldrb	r3, [r7, #23]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	2204      	movs	r2, #4
 8001052:	409a      	lsls	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	d04f      	beq.n	80010fc <HAL_DMA_IRQHandler+0xc8>
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	2b00      	cmp	r3, #0
 8001064:	d04a      	beq.n	80010fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	2b00      	cmp	r3, #0
 8001072:	d107      	bne.n	8001084 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 0204 	bic.w	r2, r2, #4
 8001082:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a66      	ldr	r2, [pc, #408]	; (8001224 <HAL_DMA_IRQHandler+0x1f0>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d029      	beq.n	80010e2 <HAL_DMA_IRQHandler+0xae>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a65      	ldr	r2, [pc, #404]	; (8001228 <HAL_DMA_IRQHandler+0x1f4>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d022      	beq.n	80010de <HAL_DMA_IRQHandler+0xaa>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a63      	ldr	r2, [pc, #396]	; (800122c <HAL_DMA_IRQHandler+0x1f8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01a      	beq.n	80010d8 <HAL_DMA_IRQHandler+0xa4>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a62      	ldr	r2, [pc, #392]	; (8001230 <HAL_DMA_IRQHandler+0x1fc>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d012      	beq.n	80010d2 <HAL_DMA_IRQHandler+0x9e>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a60      	ldr	r2, [pc, #384]	; (8001234 <HAL_DMA_IRQHandler+0x200>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d00a      	beq.n	80010cc <HAL_DMA_IRQHandler+0x98>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a5f      	ldr	r2, [pc, #380]	; (8001238 <HAL_DMA_IRQHandler+0x204>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d102      	bne.n	80010c6 <HAL_DMA_IRQHandler+0x92>
 80010c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010c4:	e00e      	b.n	80010e4 <HAL_DMA_IRQHandler+0xb0>
 80010c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80010ca:	e00b      	b.n	80010e4 <HAL_DMA_IRQHandler+0xb0>
 80010cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010d0:	e008      	b.n	80010e4 <HAL_DMA_IRQHandler+0xb0>
 80010d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010d6:	e005      	b.n	80010e4 <HAL_DMA_IRQHandler+0xb0>
 80010d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010dc:	e002      	b.n	80010e4 <HAL_DMA_IRQHandler+0xb0>
 80010de:	2340      	movs	r3, #64	; 0x40
 80010e0:	e000      	b.n	80010e4 <HAL_DMA_IRQHandler+0xb0>
 80010e2:	2304      	movs	r3, #4
 80010e4:	4a55      	ldr	r2, [pc, #340]	; (800123c <HAL_DMA_IRQHandler+0x208>)
 80010e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8094 	beq.w	800121a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80010fa:	e08e      	b.n	800121a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	2202      	movs	r2, #2
 8001102:	409a      	lsls	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4013      	ands	r3, r2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d056      	beq.n	80011ba <HAL_DMA_IRQHandler+0x186>
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d051      	beq.n	80011ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10b      	bne.n	800113c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 020a 	bic.w	r2, r2, #10
 8001132:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a38      	ldr	r2, [pc, #224]	; (8001224 <HAL_DMA_IRQHandler+0x1f0>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d029      	beq.n	800119a <HAL_DMA_IRQHandler+0x166>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a37      	ldr	r2, [pc, #220]	; (8001228 <HAL_DMA_IRQHandler+0x1f4>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d022      	beq.n	8001196 <HAL_DMA_IRQHandler+0x162>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a35      	ldr	r2, [pc, #212]	; (800122c <HAL_DMA_IRQHandler+0x1f8>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d01a      	beq.n	8001190 <HAL_DMA_IRQHandler+0x15c>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a34      	ldr	r2, [pc, #208]	; (8001230 <HAL_DMA_IRQHandler+0x1fc>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d012      	beq.n	800118a <HAL_DMA_IRQHandler+0x156>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a32      	ldr	r2, [pc, #200]	; (8001234 <HAL_DMA_IRQHandler+0x200>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00a      	beq.n	8001184 <HAL_DMA_IRQHandler+0x150>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a31      	ldr	r2, [pc, #196]	; (8001238 <HAL_DMA_IRQHandler+0x204>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d102      	bne.n	800117e <HAL_DMA_IRQHandler+0x14a>
 8001178:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800117c:	e00e      	b.n	800119c <HAL_DMA_IRQHandler+0x168>
 800117e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001182:	e00b      	b.n	800119c <HAL_DMA_IRQHandler+0x168>
 8001184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001188:	e008      	b.n	800119c <HAL_DMA_IRQHandler+0x168>
 800118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118e:	e005      	b.n	800119c <HAL_DMA_IRQHandler+0x168>
 8001190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001194:	e002      	b.n	800119c <HAL_DMA_IRQHandler+0x168>
 8001196:	2320      	movs	r3, #32
 8001198:	e000      	b.n	800119c <HAL_DMA_IRQHandler+0x168>
 800119a:	2302      	movs	r3, #2
 800119c:	4a27      	ldr	r2, [pc, #156]	; (800123c <HAL_DMA_IRQHandler+0x208>)
 800119e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d034      	beq.n	800121a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011b8:	e02f      	b.n	800121a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	2208      	movs	r2, #8
 80011c0:	409a      	lsls	r2, r3
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d028      	beq.n	800121c <HAL_DMA_IRQHandler+0x1e8>
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 0308 	and.w	r3, r3, #8
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d023      	beq.n	800121c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 020e 	bic.w	r2, r2, #14
 80011e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ec:	2101      	movs	r1, #1
 80011ee:	fa01 f202 	lsl.w	r2, r1, r2
 80011f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	2b00      	cmp	r3, #0
 8001210:	d004      	beq.n	800121c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	4798      	blx	r3
    }
  }
  return;
 800121a:	bf00      	nop
 800121c:	bf00      	nop
}
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40020008 	.word	0x40020008
 8001228:	4002001c 	.word	0x4002001c
 800122c:	40020030 	.word	0x40020030
 8001230:	40020044 	.word	0x40020044
 8001234:	40020058 	.word	0x40020058
 8001238:	4002006c 	.word	0x4002006c
 800123c:	40020000 	.word	0x40020000

08001240 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001256:	2101      	movs	r1, #1
 8001258:	fa01 f202 	lsl.w	r2, r1, r2
 800125c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b10      	cmp	r3, #16
 800126c:	d108      	bne.n	8001280 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800127e:	e007      	b.n	8001290 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	60da      	str	r2, [r3, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
	...

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b480      	push	{r7}
 800129e:	b08b      	sub	sp, #44	; 0x2c
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012aa:	2300      	movs	r3, #0
 80012ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ae:	e127      	b.n	8001500 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012b0:	2201      	movs	r2, #1
 80012b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	69fa      	ldr	r2, [r7, #28]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f040 8116 	bne.w	80014fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b12      	cmp	r3, #18
 80012d4:	d034      	beq.n	8001340 <HAL_GPIO_Init+0xa4>
 80012d6:	2b12      	cmp	r3, #18
 80012d8:	d80d      	bhi.n	80012f6 <HAL_GPIO_Init+0x5a>
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d02b      	beq.n	8001336 <HAL_GPIO_Init+0x9a>
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d804      	bhi.n	80012ec <HAL_GPIO_Init+0x50>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d031      	beq.n	800134a <HAL_GPIO_Init+0xae>
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d01c      	beq.n	8001324 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ea:	e048      	b.n	800137e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d043      	beq.n	8001378 <HAL_GPIO_Init+0xdc>
 80012f0:	2b11      	cmp	r3, #17
 80012f2:	d01b      	beq.n	800132c <HAL_GPIO_Init+0x90>
          break;
 80012f4:	e043      	b.n	800137e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012f6:	4a89      	ldr	r2, [pc, #548]	; (800151c <HAL_GPIO_Init+0x280>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d026      	beq.n	800134a <HAL_GPIO_Init+0xae>
 80012fc:	4a87      	ldr	r2, [pc, #540]	; (800151c <HAL_GPIO_Init+0x280>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d806      	bhi.n	8001310 <HAL_GPIO_Init+0x74>
 8001302:	4a87      	ldr	r2, [pc, #540]	; (8001520 <HAL_GPIO_Init+0x284>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d020      	beq.n	800134a <HAL_GPIO_Init+0xae>
 8001308:	4a86      	ldr	r2, [pc, #536]	; (8001524 <HAL_GPIO_Init+0x288>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01d      	beq.n	800134a <HAL_GPIO_Init+0xae>
          break;
 800130e:	e036      	b.n	800137e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001310:	4a85      	ldr	r2, [pc, #532]	; (8001528 <HAL_GPIO_Init+0x28c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0xae>
 8001316:	4a85      	ldr	r2, [pc, #532]	; (800152c <HAL_GPIO_Init+0x290>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d016      	beq.n	800134a <HAL_GPIO_Init+0xae>
 800131c:	4a84      	ldr	r2, [pc, #528]	; (8001530 <HAL_GPIO_Init+0x294>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d013      	beq.n	800134a <HAL_GPIO_Init+0xae>
          break;
 8001322:	e02c      	b.n	800137e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	623b      	str	r3, [r7, #32]
          break;
 800132a:	e028      	b.n	800137e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	3304      	adds	r3, #4
 8001332:	623b      	str	r3, [r7, #32]
          break;
 8001334:	e023      	b.n	800137e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	3308      	adds	r3, #8
 800133c:	623b      	str	r3, [r7, #32]
          break;
 800133e:	e01e      	b.n	800137e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	330c      	adds	r3, #12
 8001346:	623b      	str	r3, [r7, #32]
          break;
 8001348:	e019      	b.n	800137e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d102      	bne.n	8001358 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001352:	2304      	movs	r3, #4
 8001354:	623b      	str	r3, [r7, #32]
          break;
 8001356:	e012      	b.n	800137e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d105      	bne.n	800136c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001360:	2308      	movs	r3, #8
 8001362:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	611a      	str	r2, [r3, #16]
          break;
 800136a:	e008      	b.n	800137e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800136c:	2308      	movs	r3, #8
 800136e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	615a      	str	r2, [r3, #20]
          break;
 8001376:	e002      	b.n	800137e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
          break;
 800137c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2bff      	cmp	r3, #255	; 0xff
 8001382:	d801      	bhi.n	8001388 <HAL_GPIO_Init+0xec>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	e001      	b.n	800138c <HAL_GPIO_Init+0xf0>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3304      	adds	r3, #4
 800138c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2bff      	cmp	r3, #255	; 0xff
 8001392:	d802      	bhi.n	800139a <HAL_GPIO_Init+0xfe>
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	e002      	b.n	80013a0 <HAL_GPIO_Init+0x104>
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	3b08      	subs	r3, #8
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	210f      	movs	r1, #15
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43db      	mvns	r3, r3
 80013b0:	401a      	ands	r2, r3
 80013b2:	6a39      	ldr	r1, [r7, #32]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ba:	431a      	orrs	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 8096 	beq.w	80014fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013ce:	4b59      	ldr	r3, [pc, #356]	; (8001534 <HAL_GPIO_Init+0x298>)
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4a58      	ldr	r2, [pc, #352]	; (8001534 <HAL_GPIO_Init+0x298>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6193      	str	r3, [r2, #24]
 80013da:	4b56      	ldr	r3, [pc, #344]	; (8001534 <HAL_GPIO_Init+0x298>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013e6:	4a54      	ldr	r2, [pc, #336]	; (8001538 <HAL_GPIO_Init+0x29c>)
 80013e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4013      	ands	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a4b      	ldr	r2, [pc, #300]	; (800153c <HAL_GPIO_Init+0x2a0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x19e>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a4a      	ldr	r2, [pc, #296]	; (8001540 <HAL_GPIO_Init+0x2a4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x19a>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a49      	ldr	r2, [pc, #292]	; (8001544 <HAL_GPIO_Init+0x2a8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x196>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a48      	ldr	r2, [pc, #288]	; (8001548 <HAL_GPIO_Init+0x2ac>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x192>
 800142a:	2303      	movs	r3, #3
 800142c:	e006      	b.n	800143c <HAL_GPIO_Init+0x1a0>
 800142e:	2304      	movs	r3, #4
 8001430:	e004      	b.n	800143c <HAL_GPIO_Init+0x1a0>
 8001432:	2302      	movs	r3, #2
 8001434:	e002      	b.n	800143c <HAL_GPIO_Init+0x1a0>
 8001436:	2301      	movs	r3, #1
 8001438:	e000      	b.n	800143c <HAL_GPIO_Init+0x1a0>
 800143a:	2300      	movs	r3, #0
 800143c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800143e:	f002 0203 	and.w	r2, r2, #3
 8001442:	0092      	lsls	r2, r2, #2
 8001444:	4093      	lsls	r3, r2
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800144c:	493a      	ldr	r1, [pc, #232]	; (8001538 <HAL_GPIO_Init+0x29c>)
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	3302      	adds	r3, #2
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001466:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_GPIO_Init+0x2b0>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	4938      	ldr	r1, [pc, #224]	; (800154c <HAL_GPIO_Init+0x2b0>)
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]
 8001472:	e006      	b.n	8001482 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001474:	4b35      	ldr	r3, [pc, #212]	; (800154c <HAL_GPIO_Init+0x2b0>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	43db      	mvns	r3, r3
 800147c:	4933      	ldr	r1, [pc, #204]	; (800154c <HAL_GPIO_Init+0x2b0>)
 800147e:	4013      	ands	r3, r2
 8001480:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800148e:	4b2f      	ldr	r3, [pc, #188]	; (800154c <HAL_GPIO_Init+0x2b0>)
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	492e      	ldr	r1, [pc, #184]	; (800154c <HAL_GPIO_Init+0x2b0>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
 800149a:	e006      	b.n	80014aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800149c:	4b2b      	ldr	r3, [pc, #172]	; (800154c <HAL_GPIO_Init+0x2b0>)
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	4929      	ldr	r1, [pc, #164]	; (800154c <HAL_GPIO_Init+0x2b0>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d006      	beq.n	80014c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <HAL_GPIO_Init+0x2b0>)
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	4924      	ldr	r1, [pc, #144]	; (800154c <HAL_GPIO_Init+0x2b0>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	608b      	str	r3, [r1, #8]
 80014c2:	e006      	b.n	80014d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <HAL_GPIO_Init+0x2b0>)
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	491f      	ldr	r1, [pc, #124]	; (800154c <HAL_GPIO_Init+0x2b0>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014de:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_GPIO_Init+0x2b0>)
 80014e0:	68da      	ldr	r2, [r3, #12]
 80014e2:	491a      	ldr	r1, [pc, #104]	; (800154c <HAL_GPIO_Init+0x2b0>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	60cb      	str	r3, [r1, #12]
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <HAL_GPIO_Init+0x2b0>)
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	4915      	ldr	r1, [pc, #84]	; (800154c <HAL_GPIO_Init+0x2b0>)
 80014f6:	4013      	ands	r3, r2
 80014f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	3301      	adds	r3, #1
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	fa22 f303 	lsr.w	r3, r2, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	f47f aed0 	bne.w	80012b0 <HAL_GPIO_Init+0x14>
  }
}
 8001510:	bf00      	nop
 8001512:	372c      	adds	r7, #44	; 0x2c
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	10210000 	.word	0x10210000
 8001520:	10110000 	.word	0x10110000
 8001524:	10120000 	.word	0x10120000
 8001528:	10310000 	.word	0x10310000
 800152c:	10320000 	.word	0x10320000
 8001530:	10220000 	.word	0x10220000
 8001534:	40021000 	.word	0x40021000
 8001538:	40010000 	.word	0x40010000
 800153c:	40010800 	.word	0x40010800
 8001540:	40010c00 	.word	0x40010c00
 8001544:	40011000 	.word	0x40011000
 8001548:	40011400 	.word	0x40011400
 800154c:	40010400 	.word	0x40010400

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	611a      	str	r2, [r3, #16]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	bc80      	pop	{r7}
 800157e:	4770      	bx	lr

08001580 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43d9      	mvns	r1, r3
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	400b      	ands	r3, r1
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	611a      	str	r2, [r3, #16]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e11f      	b.n	8001806 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d106      	bne.n	80015e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff f840 	bl	8000660 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2224      	movs	r2, #36	; 0x24
 80015e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001618:	f000 fcda 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 800161c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a7b      	ldr	r2, [pc, #492]	; (8001810 <HAL_I2C_Init+0x25c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d807      	bhi.n	8001638 <HAL_I2C_Init+0x84>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4a7a      	ldr	r2, [pc, #488]	; (8001814 <HAL_I2C_Init+0x260>)
 800162c:	4293      	cmp	r3, r2
 800162e:	bf94      	ite	ls
 8001630:	2301      	movls	r3, #1
 8001632:	2300      	movhi	r3, #0
 8001634:	b2db      	uxtb	r3, r3
 8001636:	e006      	b.n	8001646 <HAL_I2C_Init+0x92>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4a77      	ldr	r2, [pc, #476]	; (8001818 <HAL_I2C_Init+0x264>)
 800163c:	4293      	cmp	r3, r2
 800163e:	bf94      	ite	ls
 8001640:	2301      	movls	r3, #1
 8001642:	2300      	movhi	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e0db      	b.n	8001806 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4a72      	ldr	r2, [pc, #456]	; (800181c <HAL_I2C_Init+0x268>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	0c9b      	lsrs	r3, r3, #18
 8001658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68ba      	ldr	r2, [r7, #8]
 800166a:	430a      	orrs	r2, r1
 800166c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	4a64      	ldr	r2, [pc, #400]	; (8001810 <HAL_I2C_Init+0x25c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d802      	bhi.n	8001688 <HAL_I2C_Init+0xd4>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3301      	adds	r3, #1
 8001686:	e009      	b.n	800169c <HAL_I2C_Init+0xe8>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	4a63      	ldr	r2, [pc, #396]	; (8001820 <HAL_I2C_Init+0x26c>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	3301      	adds	r3, #1
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	430b      	orrs	r3, r1
 80016a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4956      	ldr	r1, [pc, #344]	; (8001810 <HAL_I2C_Init+0x25c>)
 80016b8:	428b      	cmp	r3, r1
 80016ba:	d80d      	bhi.n	80016d8 <HAL_I2C_Init+0x124>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1e59      	subs	r1, r3, #1
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80016ca:	3301      	adds	r3, #1
 80016cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016d0:	2b04      	cmp	r3, #4
 80016d2:	bf38      	it	cc
 80016d4:	2304      	movcc	r3, #4
 80016d6:	e04f      	b.n	8001778 <HAL_I2C_Init+0x1c4>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d111      	bne.n	8001704 <HAL_I2C_Init+0x150>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	440b      	add	r3, r1
 80016ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f2:	3301      	adds	r3, #1
 80016f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	e012      	b.n	800172a <HAL_I2C_Init+0x176>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1e58      	subs	r0, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	0099      	lsls	r1, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	fbb0 f3f3 	udiv	r3, r0, r3
 800171a:	3301      	adds	r3, #1
 800171c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001720:	2b00      	cmp	r3, #0
 8001722:	bf0c      	ite	eq
 8001724:	2301      	moveq	r3, #1
 8001726:	2300      	movne	r3, #0
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_I2C_Init+0x17e>
 800172e:	2301      	movs	r3, #1
 8001730:	e022      	b.n	8001778 <HAL_I2C_Init+0x1c4>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d10e      	bne.n	8001758 <HAL_I2C_Init+0x1a4>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	1e58      	subs	r0, r3, #1
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6859      	ldr	r1, [r3, #4]
 8001742:	460b      	mov	r3, r1
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	440b      	add	r3, r1
 8001748:	fbb0 f3f3 	udiv	r3, r0, r3
 800174c:	3301      	adds	r3, #1
 800174e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001756:	e00f      	b.n	8001778 <HAL_I2C_Init+0x1c4>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1e58      	subs	r0, r3, #1
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	0099      	lsls	r1, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	fbb0 f3f3 	udiv	r3, r0, r3
 800176e:	3301      	adds	r3, #1
 8001770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001774:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	6809      	ldr	r1, [r1, #0]
 800177c:	4313      	orrs	r3, r2
 800177e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	431a      	orrs	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	6911      	ldr	r1, [r2, #16]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68d2      	ldr	r2, [r2, #12]
 80017b2:	4311      	orrs	r1, r2
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	430b      	orrs	r3, r1
 80017ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695a      	ldr	r2, [r3, #20]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	431a      	orrs	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f042 0201 	orr.w	r2, r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2220      	movs	r2, #32
 80017f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	000186a0 	.word	0x000186a0
 8001814:	001e847f 	.word	0x001e847f
 8001818:	003d08ff 	.word	0x003d08ff
 800181c:	431bde83 	.word	0x431bde83
 8001820:	10624dd3 	.word	0x10624dd3

08001824 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e26c      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8087 	beq.w	8001952 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001844:	4b92      	ldr	r3, [pc, #584]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b04      	cmp	r3, #4
 800184e:	d00c      	beq.n	800186a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001850:	4b8f      	ldr	r3, [pc, #572]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 030c 	and.w	r3, r3, #12
 8001858:	2b08      	cmp	r3, #8
 800185a:	d112      	bne.n	8001882 <HAL_RCC_OscConfig+0x5e>
 800185c:	4b8c      	ldr	r3, [pc, #560]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001868:	d10b      	bne.n	8001882 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186a:	4b89      	ldr	r3, [pc, #548]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d06c      	beq.n	8001950 <HAL_RCC_OscConfig+0x12c>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d168      	bne.n	8001950 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e246      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x76>
 800188c:	4b80      	ldr	r3, [pc, #512]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a7f      	ldr	r2, [pc, #508]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e02e      	b.n	80018f8 <HAL_RCC_OscConfig+0xd4>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x98>
 80018a2:	4b7b      	ldr	r3, [pc, #492]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a7a      	ldr	r2, [pc, #488]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b78      	ldr	r3, [pc, #480]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a77      	ldr	r2, [pc, #476]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e01d      	b.n	80018f8 <HAL_RCC_OscConfig+0xd4>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0xbc>
 80018c6:	4b72      	ldr	r3, [pc, #456]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a71      	ldr	r2, [pc, #452]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	4b6f      	ldr	r3, [pc, #444]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a6e      	ldr	r2, [pc, #440]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0xd4>
 80018e0:	4b6b      	ldr	r3, [pc, #428]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a6a      	ldr	r2, [pc, #424]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b68      	ldr	r3, [pc, #416]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a67      	ldr	r2, [pc, #412]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d013      	beq.n	8001928 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff f9c6 	bl	8000c90 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff f9c2 	bl	8000c90 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e1fa      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b5d      	ldr	r3, [pc, #372]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0xe4>
 8001926:	e014      	b.n	8001952 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff f9b2 	bl	8000c90 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff f9ae 	bl	8000c90 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	; 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e1e6      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001942:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1f0      	bne.n	8001930 <HAL_RCC_OscConfig+0x10c>
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d063      	beq.n	8001a26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800195e:	4b4c      	ldr	r3, [pc, #304]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f003 030c 	and.w	r3, r3, #12
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00b      	beq.n	8001982 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800196a:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b08      	cmp	r3, #8
 8001974:	d11c      	bne.n	80019b0 <HAL_RCC_OscConfig+0x18c>
 8001976:	4b46      	ldr	r3, [pc, #280]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d116      	bne.n	80019b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001982:	4b43      	ldr	r3, [pc, #268]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_RCC_OscConfig+0x176>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e1ba      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	00db      	lsls	r3, r3, #3
 80019a8:	4939      	ldr	r1, [pc, #228]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ae:	e03a      	b.n	8001a26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d020      	beq.n	80019fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b8:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff f967 	bl	8000c90 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c6:	f7ff f963 	bl	8000c90 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e19b      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4927      	ldr	r1, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
 80019f8:	e015      	b.n	8001a26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <HAL_RCC_OscConfig+0x270>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7ff f946 	bl	8000c90 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a08:	f7ff f942 	bl	8000c90 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e17a      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a1a:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d03a      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d019      	beq.n	8001a6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff f926 	bl	8000c90 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff f922 	bl	8000c90 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e15a      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a66:	2001      	movs	r0, #1
 8001a68:	f000 fada 	bl	8002020 <RCC_Delay>
 8001a6c:	e01c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a74:	f7ff f90c 	bl	8000c90 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7a:	e00f      	b.n	8001a9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff f908 	bl	8000c90 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d908      	bls.n	8001a9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e140      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	42420000 	.word	0x42420000
 8001a98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a9c:	4b9e      	ldr	r3, [pc, #632]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e9      	bne.n	8001a7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 80a6 	beq.w	8001c02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aba:	4b97      	ldr	r3, [pc, #604]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d10d      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac6:	4b94      	ldr	r3, [pc, #592]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4a93      	ldr	r2, [pc, #588]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	61d3      	str	r3, [r2, #28]
 8001ad2:	4b91      	ldr	r3, [pc, #580]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	4b8e      	ldr	r3, [pc, #568]	; (8001d1c <HAL_RCC_OscConfig+0x4f8>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d118      	bne.n	8001b20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aee:	4b8b      	ldr	r3, [pc, #556]	; (8001d1c <HAL_RCC_OscConfig+0x4f8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a8a      	ldr	r2, [pc, #552]	; (8001d1c <HAL_RCC_OscConfig+0x4f8>)
 8001af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001afa:	f7ff f8c9 	bl	8000c90 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b02:	f7ff f8c5 	bl	8000c90 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b64      	cmp	r3, #100	; 0x64
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e0fd      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	4b81      	ldr	r3, [pc, #516]	; (8001d1c <HAL_RCC_OscConfig+0x4f8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x312>
 8001b28:	4b7b      	ldr	r3, [pc, #492]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4a7a      	ldr	r2, [pc, #488]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6213      	str	r3, [r2, #32]
 8001b34:	e02d      	b.n	8001b92 <HAL_RCC_OscConfig+0x36e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x334>
 8001b3e:	4b76      	ldr	r3, [pc, #472]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a75      	ldr	r2, [pc, #468]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	f023 0301 	bic.w	r3, r3, #1
 8001b48:	6213      	str	r3, [r2, #32]
 8001b4a:	4b73      	ldr	r3, [pc, #460]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a72      	ldr	r2, [pc, #456]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	e01c      	b.n	8001b92 <HAL_RCC_OscConfig+0x36e>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d10c      	bne.n	8001b7a <HAL_RCC_OscConfig+0x356>
 8001b60:	4b6d      	ldr	r3, [pc, #436]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a6c      	ldr	r2, [pc, #432]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	4b6a      	ldr	r3, [pc, #424]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a69      	ldr	r2, [pc, #420]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	e00b      	b.n	8001b92 <HAL_RCC_OscConfig+0x36e>
 8001b7a:	4b67      	ldr	r3, [pc, #412]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a66      	ldr	r2, [pc, #408]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	4b64      	ldr	r3, [pc, #400]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a63      	ldr	r2, [pc, #396]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d015      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f879 	bl	8000c90 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff f875 	bl	8000c90 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e0ab      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb8:	4b57      	ldr	r3, [pc, #348]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0ee      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x37e>
 8001bc4:	e014      	b.n	8001bf0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc6:	f7ff f863 	bl	8000c90 <HAL_GetTick>
 8001bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bcc:	e00a      	b.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bce:	f7ff f85f 	bl	8000c90 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e095      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be4:	4b4c      	ldr	r3, [pc, #304]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1ee      	bne.n	8001bce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bf0:	7dfb      	ldrb	r3, [r7, #23]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d105      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf6:	4b48      	ldr	r3, [pc, #288]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a47      	ldr	r2, [pc, #284]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	f000 8081 	beq.w	8001d0e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c0c:	4b42      	ldr	r3, [pc, #264]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 030c 	and.w	r3, r3, #12
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d061      	beq.n	8001cdc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d146      	bne.n	8001cae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c20:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <HAL_RCC_OscConfig+0x4fc>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c26:	f7ff f833 	bl	8000c90 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c2e:	f7ff f82f 	bl	8000c90 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e067      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c40:	4b35      	ldr	r3, [pc, #212]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f0      	bne.n	8001c2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c54:	d108      	bne.n	8001c68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c56:	4b30      	ldr	r3, [pc, #192]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	492d      	ldr	r1, [pc, #180]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c68:	4b2b      	ldr	r3, [pc, #172]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a19      	ldr	r1, [r3, #32]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	430b      	orrs	r3, r1
 8001c7a:	4927      	ldr	r1, [pc, #156]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c80:	4b27      	ldr	r3, [pc, #156]	; (8001d20 <HAL_RCC_OscConfig+0x4fc>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff f803 	bl	8000c90 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8e:	f7fe ffff 	bl	8000c90 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e037      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x46a>
 8001cac:	e02f      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b1c      	ldr	r3, [pc, #112]	; (8001d20 <HAL_RCC_OscConfig+0x4fc>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ffec 	bl	8000c90 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7fe ffe8 	bl	8000c90 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e020      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x498>
 8001cda:	e018      	b.n	8001d0e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e013      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	; (8001d18 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40007000 	.word	0x40007000
 8001d20:	42420060 	.word	0x42420060

08001d24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0d0      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b6a      	ldr	r3, [pc, #424]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0307 	and.w	r3, r3, #7
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d910      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b67      	ldr	r3, [pc, #412]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 0207 	bic.w	r2, r3, #7
 8001d4e:	4965      	ldr	r1, [pc, #404]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b63      	ldr	r3, [pc, #396]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e0b8      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d020      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d80:	4b59      	ldr	r3, [pc, #356]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4a58      	ldr	r2, [pc, #352]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4a52      	ldr	r2, [pc, #328]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001da2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b50      	ldr	r3, [pc, #320]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	494d      	ldr	r1, [pc, #308]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d040      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b47      	ldr	r3, [pc, #284]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d115      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e07f      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de2:	4b41      	ldr	r3, [pc, #260]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d109      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e073      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06b      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	4936      	ldr	r1, [pc, #216]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e14:	f7fe ff3c 	bl	8000c90 <HAL_GetTick>
 8001e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7fe ff38 	bl	8000c90 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e053      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b2d      	ldr	r3, [pc, #180]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e44:	4b27      	ldr	r3, [pc, #156]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d210      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4922      	ldr	r1, [pc, #136]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e032      	b.n	8001eda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e80:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4916      	ldr	r1, [pc, #88]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e9e:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001eb2:	f000 f821 	bl	8001ef8 <HAL_RCC_GetSysClockFreq>
 8001eb6:	4601      	mov	r1, r0
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_RCC_ClockConfig+0x1c8>)
 8001ec4:	5cd3      	ldrb	r3, [r2, r3]
 8001ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8001eca:	4a09      	ldr	r2, [pc, #36]	; (8001ef0 <HAL_RCC_ClockConfig+0x1cc>)
 8001ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fe9a 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40022000 	.word	0x40022000
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08002a3c 	.word	0x08002a3c
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000004 	.word	0x20000004

08001ef8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ef8:	b490      	push	{r4, r7}
 8001efa:	b08a      	sub	sp, #40	; 0x28
 8001efc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001efe:	4b2a      	ldr	r3, [pc, #168]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f00:	1d3c      	adds	r4, r7, #4
 8001f02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f08:	4b28      	ldr	r3, [pc, #160]	; (8001fac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f22:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d002      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x40>
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	d003      	beq.n	8001f3e <HAL_RCC_GetSysClockFreq+0x46>
 8001f36:	e02d      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f3a:	623b      	str	r3, [r7, #32]
      break;
 8001f3c:	e02d      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	0c9b      	lsrs	r3, r3, #18
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	0c5b      	lsrs	r3, r3, #17
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	4a0f      	ldr	r2, [pc, #60]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f76:	fb02 f203 	mul.w	r2, r2, r3
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
 8001f82:	e004      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	623b      	str	r3, [r7, #32]
      break;
 8001f92:	e002      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f96:	623b      	str	r3, [r7, #32]
      break;
 8001f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3728      	adds	r7, #40	; 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc90      	pop	{r4, r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	08002a28 	.word	0x08002a28
 8001fac:	08002a38 	.word	0x08002a38
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	007a1200 	.word	0x007a1200
 8001fb8:	003d0900 	.word	0x003d0900

08001fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc0:	4b02      	ldr	r3, [pc, #8]	; (8001fcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr
 8001fcc:	20000000 	.word	0x20000000

08001fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd4:	f7ff fff2 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8001fd8:	4601      	mov	r1, r0
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	f003 0307 	and.w	r3, r3, #7
 8001fe4:	4a03      	ldr	r2, [pc, #12]	; (8001ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	08002a4c 	.word	0x08002a4c

08001ff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ffc:	f7ff ffde 	bl	8001fbc <HAL_RCC_GetHCLKFreq>
 8002000:	4601      	mov	r1, r0
 8002002:	4b05      	ldr	r3, [pc, #20]	; (8002018 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	0adb      	lsrs	r3, r3, #11
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	4a03      	ldr	r2, [pc, #12]	; (800201c <HAL_RCC_GetPCLK2Freq+0x24>)
 800200e:	5cd3      	ldrb	r3, [r2, r3]
 8002010:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002014:	4618      	mov	r0, r3
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40021000 	.word	0x40021000
 800201c:	08002a4c 	.word	0x08002a4c

08002020 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <RCC_Delay+0x34>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <RCC_Delay+0x38>)
 800202e:	fba2 2303 	umull	r2, r3, r2, r3
 8002032:	0a5b      	lsrs	r3, r3, #9
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	fb02 f303 	mul.w	r3, r2, r3
 800203a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800203c:	bf00      	nop
  }
  while (Delay --);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	60fa      	str	r2, [r7, #12]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f9      	bne.n	800203c <RCC_Delay+0x1c>
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000000 	.word	0x20000000
 8002058:	10624dd3 	.word	0x10624dd3

0800205c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e03f      	b.n	80020ee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7fe fce6 	bl	8000a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2224      	movs	r2, #36	; 0x24
 800208c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800209e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fa37 	bl	8002514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80020c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68da      	ldr	r2, [r3, #12]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80020d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	4613      	mov	r3, r2
 8002104:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b20      	cmp	r3, #32
 8002110:	d153      	bne.n	80021ba <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_UART_Transmit_DMA+0x26>
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d101      	bne.n	8002122 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e04c      	b.n	80021bc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002128:	2b01      	cmp	r3, #1
 800212a:	d101      	bne.n	8002130 <HAL_UART_Transmit_DMA+0x38>
 800212c:	2302      	movs	r3, #2
 800212e:	e045      	b.n	80021bc <HAL_UART_Transmit_DMA+0xc4>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	88fa      	ldrh	r2, [r7, #6]
 8002142:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	88fa      	ldrh	r2, [r7, #6]
 8002148:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2221      	movs	r2, #33	; 0x21
 8002154:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_UART_Transmit_DMA+0xcc>)
 800215e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	4a18      	ldr	r2, [pc, #96]	; (80021c8 <HAL_UART_Transmit_DMA+0xd0>)
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216c:	4a17      	ldr	r2, [pc, #92]	; (80021cc <HAL_UART_Transmit_DMA+0xd4>)
 800216e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	2200      	movs	r2, #0
 8002176:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8002178:	f107 0308 	add.w	r3, r7, #8
 800217c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6819      	ldr	r1, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3304      	adds	r3, #4
 800218c:	461a      	mov	r2, r3
 800218e:	88fb      	ldrh	r3, [r7, #6]
 8002190:	f7fe fef0 	bl	8000f74 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800219c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021b4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e000      	b.n	80021bc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80021ba:	2302      	movs	r3, #2
  }
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3718      	adds	r7, #24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	0800232b 	.word	0x0800232b
 80021c8:	0800237d 	.word	0x0800237d
 80021cc:	0800241d 	.word	0x0800241d

080021d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b086      	sub	sp, #24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	4613      	mov	r3, r2
 80021dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d166      	bne.n	80022b8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <HAL_UART_Receive_DMA+0x26>
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e05f      	b.n	80022ba <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_UART_Receive_DMA+0x38>
 8002204:	2302      	movs	r3, #2
 8002206:	e058      	b.n	80022ba <HAL_UART_Receive_DMA+0xea>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	88fa      	ldrh	r2, [r7, #6]
 800221a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2222      	movs	r2, #34	; 0x22
 8002226:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	4a25      	ldr	r2, [pc, #148]	; (80022c4 <HAL_UART_Receive_DMA+0xf4>)
 8002230:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <HAL_UART_Receive_DMA+0xf8>)
 8002238:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800223e:	4a23      	ldr	r2, [pc, #140]	; (80022cc <HAL_UART_Receive_DMA+0xfc>)
 8002240:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002246:	2200      	movs	r2, #0
 8002248:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 800224a:	f107 0308 	add.w	r3, r7, #8
 800224e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	3304      	adds	r3, #4
 800225a:	4619      	mov	r1, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	f7fe fe87 	bl	8000f74 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	613b      	str	r3, [r7, #16]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002292:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f042 0201 	orr.w	r2, r2, #1
 80022a2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	08002399 	.word	0x08002399
 80022c8:	08002401 	.word	0x08002401
 80022cc:	0800241d 	.word	0x0800241d

080022d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d113      	bne.n	800236e <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800235a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800236a:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800236c:	e002      	b.n	8002374 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f7ff ffae 	bl	80022d0 <HAL_UART_TxCpltCallback>
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f7ff ffa9 	bl	80022e2 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0320 	and.w	r3, r3, #32
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d11e      	bne.n	80023f2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0201 	bic.w	r2, r2, #1
 80023d8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	695a      	ldr	r2, [r3, #20]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023e8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f7ff ff7e 	bl	80022f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff ff79 	bl	8002306 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002414:	bf00      	nop
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf14      	ite	ne
 800243c:	2301      	movne	r3, #1
 800243e:	2300      	moveq	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b21      	cmp	r3, #33	; 0x21
 800244e:	d108      	bne.n	8002462 <UART_DMAError+0x46>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2200      	movs	r2, #0
 800245a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800245c:	68b8      	ldr	r0, [r7, #8]
 800245e:	f000 f827 	bl	80024b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b22      	cmp	r3, #34	; 0x22
 8002482:	d108      	bne.n	8002496 <UART_DMAError+0x7a>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	2200      	movs	r2, #0
 800248e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002490:	68b8      	ldr	r0, [r7, #8]
 8002492:	f000 f822 	bl	80024da <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800249a:	f043 0210 	orr.w	r2, r3, #16
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024a2:	68b8      	ldr	r0, [r7, #8]
 80024a4:	f7ff ff38 	bl	8002318 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80024c6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2220      	movs	r2, #32
 80024cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80024f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695a      	ldr	r2, [r3, #20]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800254e:	f023 030c 	bic.w	r3, r3, #12
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	430b      	orrs	r3, r1
 800255a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699a      	ldr	r2, [r3, #24]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a2c      	ldr	r2, [pc, #176]	; (8002628 <UART_SetConfig+0x114>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d103      	bne.n	8002584 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800257c:	f7ff fd3c 	bl	8001ff8 <HAL_RCC_GetPCLK2Freq>
 8002580:	60f8      	str	r0, [r7, #12]
 8002582:	e002      	b.n	800258a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002584:	f7ff fd24 	bl	8001fd0 <HAL_RCC_GetPCLK1Freq>
 8002588:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	009a      	lsls	r2, r3, #2
 8002594:	441a      	add	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	4a22      	ldr	r2, [pc, #136]	; (800262c <UART_SetConfig+0x118>)
 80025a2:	fba2 2303 	umull	r2, r3, r2, r3
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	0119      	lsls	r1, r3, #4
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	009a      	lsls	r2, r3, #2
 80025b4:	441a      	add	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <UART_SetConfig+0x118>)
 80025c2:	fba3 0302 	umull	r0, r3, r3, r2
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2064      	movs	r0, #100	; 0x64
 80025ca:	fb00 f303 	mul.w	r3, r0, r3
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	3332      	adds	r3, #50	; 0x32
 80025d4:	4a15      	ldr	r2, [pc, #84]	; (800262c <UART_SetConfig+0x118>)
 80025d6:	fba2 2303 	umull	r2, r3, r2, r3
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025e0:	4419      	add	r1, r3
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	009a      	lsls	r2, r3, #2
 80025ec:	441a      	add	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025f8:	4b0c      	ldr	r3, [pc, #48]	; (800262c <UART_SetConfig+0x118>)
 80025fa:	fba3 0302 	umull	r0, r3, r3, r2
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2064      	movs	r0, #100	; 0x64
 8002602:	fb00 f303 	mul.w	r3, r0, r3
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	011b      	lsls	r3, r3, #4
 800260a:	3332      	adds	r3, #50	; 0x32
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <UART_SetConfig+0x118>)
 800260e:	fba2 2303 	umull	r2, r3, r2, r3
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	f003 020f 	and.w	r2, r3, #15
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	440a      	add	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40013800 	.word	0x40013800
 800262c:	51eb851f 	.word	0x51eb851f

08002630 <atoi>:
 8002630:	220a      	movs	r2, #10
 8002632:	2100      	movs	r1, #0
 8002634:	f000 b902 	b.w	800283c <strtol>

08002638 <__errno>:
 8002638:	4b01      	ldr	r3, [pc, #4]	; (8002640 <__errno+0x8>)
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	2000000c 	.word	0x2000000c

08002644 <__libc_init_array>:
 8002644:	b570      	push	{r4, r5, r6, lr}
 8002646:	2500      	movs	r5, #0
 8002648:	4e0c      	ldr	r6, [pc, #48]	; (800267c <__libc_init_array+0x38>)
 800264a:	4c0d      	ldr	r4, [pc, #52]	; (8002680 <__libc_init_array+0x3c>)
 800264c:	1ba4      	subs	r4, r4, r6
 800264e:	10a4      	asrs	r4, r4, #2
 8002650:	42a5      	cmp	r5, r4
 8002652:	d109      	bne.n	8002668 <__libc_init_array+0x24>
 8002654:	f000 f9a0 	bl	8002998 <_init>
 8002658:	2500      	movs	r5, #0
 800265a:	4e0a      	ldr	r6, [pc, #40]	; (8002684 <__libc_init_array+0x40>)
 800265c:	4c0a      	ldr	r4, [pc, #40]	; (8002688 <__libc_init_array+0x44>)
 800265e:	1ba4      	subs	r4, r4, r6
 8002660:	10a4      	asrs	r4, r4, #2
 8002662:	42a5      	cmp	r5, r4
 8002664:	d105      	bne.n	8002672 <__libc_init_array+0x2e>
 8002666:	bd70      	pop	{r4, r5, r6, pc}
 8002668:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800266c:	4798      	blx	r3
 800266e:	3501      	adds	r5, #1
 8002670:	e7ee      	b.n	8002650 <__libc_init_array+0xc>
 8002672:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002676:	4798      	blx	r3
 8002678:	3501      	adds	r5, #1
 800267a:	e7f2      	b.n	8002662 <__libc_init_array+0x1e>
 800267c:	08002bc0 	.word	0x08002bc0
 8002680:	08002bc0 	.word	0x08002bc0
 8002684:	08002bc0 	.word	0x08002bc0
 8002688:	08002bc4 	.word	0x08002bc4

0800268c <memset>:
 800268c:	4603      	mov	r3, r0
 800268e:	4402      	add	r2, r0
 8002690:	4293      	cmp	r3, r2
 8002692:	d100      	bne.n	8002696 <memset+0xa>
 8002694:	4770      	bx	lr
 8002696:	f803 1b01 	strb.w	r1, [r3], #1
 800269a:	e7f9      	b.n	8002690 <memset+0x4>

0800269c <strtok>:
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <strtok+0x50>)
 800269e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026a2:	681d      	ldr	r5, [r3, #0]
 80026a4:	4606      	mov	r6, r0
 80026a6:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80026a8:	460f      	mov	r7, r1
 80026aa:	b9b4      	cbnz	r4, 80026da <strtok+0x3e>
 80026ac:	2050      	movs	r0, #80	; 0x50
 80026ae:	f000 f8df 	bl	8002870 <malloc>
 80026b2:	65a8      	str	r0, [r5, #88]	; 0x58
 80026b4:	e9c0 4400 	strd	r4, r4, [r0]
 80026b8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80026bc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80026c0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80026c4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80026c8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80026cc:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80026d0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80026d4:	6184      	str	r4, [r0, #24]
 80026d6:	7704      	strb	r4, [r0, #28]
 80026d8:	6244      	str	r4, [r0, #36]	; 0x24
 80026da:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80026dc:	4639      	mov	r1, r7
 80026de:	4630      	mov	r0, r6
 80026e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026e4:	2301      	movs	r3, #1
 80026e6:	f000 b803 	b.w	80026f0 <__strtok_r>
 80026ea:	bf00      	nop
 80026ec:	2000000c 	.word	0x2000000c

080026f0 <__strtok_r>:
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b918      	cbnz	r0, 80026fc <__strtok_r+0xc>
 80026f4:	6810      	ldr	r0, [r2, #0]
 80026f6:	b908      	cbnz	r0, 80026fc <__strtok_r+0xc>
 80026f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026fa:	4620      	mov	r0, r4
 80026fc:	4604      	mov	r4, r0
 80026fe:	460f      	mov	r7, r1
 8002700:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002704:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002708:	b91e      	cbnz	r6, 8002712 <__strtok_r+0x22>
 800270a:	b96d      	cbnz	r5, 8002728 <__strtok_r+0x38>
 800270c:	6015      	str	r5, [r2, #0]
 800270e:	4628      	mov	r0, r5
 8002710:	e7f2      	b.n	80026f8 <__strtok_r+0x8>
 8002712:	42b5      	cmp	r5, r6
 8002714:	d1f6      	bne.n	8002704 <__strtok_r+0x14>
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1ef      	bne.n	80026fa <__strtok_r+0xa>
 800271a:	6014      	str	r4, [r2, #0]
 800271c:	7003      	strb	r3, [r0, #0]
 800271e:	e7eb      	b.n	80026f8 <__strtok_r+0x8>
 8002720:	462b      	mov	r3, r5
 8002722:	e00d      	b.n	8002740 <__strtok_r+0x50>
 8002724:	b926      	cbnz	r6, 8002730 <__strtok_r+0x40>
 8002726:	461c      	mov	r4, r3
 8002728:	4623      	mov	r3, r4
 800272a:	460f      	mov	r7, r1
 800272c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8002730:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002734:	42b5      	cmp	r5, r6
 8002736:	d1f5      	bne.n	8002724 <__strtok_r+0x34>
 8002738:	2d00      	cmp	r5, #0
 800273a:	d0f1      	beq.n	8002720 <__strtok_r+0x30>
 800273c:	2100      	movs	r1, #0
 800273e:	7021      	strb	r1, [r4, #0]
 8002740:	6013      	str	r3, [r2, #0]
 8002742:	e7d9      	b.n	80026f8 <__strtok_r+0x8>

08002744 <_strtol_l.isra.0>:
 8002744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002748:	4680      	mov	r8, r0
 800274a:	4689      	mov	r9, r1
 800274c:	4692      	mov	sl, r2
 800274e:	461e      	mov	r6, r3
 8002750:	460f      	mov	r7, r1
 8002752:	463d      	mov	r5, r7
 8002754:	9808      	ldr	r0, [sp, #32]
 8002756:	f815 4b01 	ldrb.w	r4, [r5], #1
 800275a:	f000 f885 	bl	8002868 <__locale_ctype_ptr_l>
 800275e:	4420      	add	r0, r4
 8002760:	7843      	ldrb	r3, [r0, #1]
 8002762:	f013 0308 	ands.w	r3, r3, #8
 8002766:	d132      	bne.n	80027ce <_strtol_l.isra.0+0x8a>
 8002768:	2c2d      	cmp	r4, #45	; 0x2d
 800276a:	d132      	bne.n	80027d2 <_strtol_l.isra.0+0x8e>
 800276c:	2201      	movs	r2, #1
 800276e:	787c      	ldrb	r4, [r7, #1]
 8002770:	1cbd      	adds	r5, r7, #2
 8002772:	2e00      	cmp	r6, #0
 8002774:	d05d      	beq.n	8002832 <_strtol_l.isra.0+0xee>
 8002776:	2e10      	cmp	r6, #16
 8002778:	d109      	bne.n	800278e <_strtol_l.isra.0+0x4a>
 800277a:	2c30      	cmp	r4, #48	; 0x30
 800277c:	d107      	bne.n	800278e <_strtol_l.isra.0+0x4a>
 800277e:	782b      	ldrb	r3, [r5, #0]
 8002780:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002784:	2b58      	cmp	r3, #88	; 0x58
 8002786:	d14f      	bne.n	8002828 <_strtol_l.isra.0+0xe4>
 8002788:	2610      	movs	r6, #16
 800278a:	786c      	ldrb	r4, [r5, #1]
 800278c:	3502      	adds	r5, #2
 800278e:	2a00      	cmp	r2, #0
 8002790:	bf14      	ite	ne
 8002792:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002796:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800279a:	2700      	movs	r7, #0
 800279c:	fbb1 fcf6 	udiv	ip, r1, r6
 80027a0:	4638      	mov	r0, r7
 80027a2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80027a6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80027aa:	2b09      	cmp	r3, #9
 80027ac:	d817      	bhi.n	80027de <_strtol_l.isra.0+0x9a>
 80027ae:	461c      	mov	r4, r3
 80027b0:	42a6      	cmp	r6, r4
 80027b2:	dd23      	ble.n	80027fc <_strtol_l.isra.0+0xb8>
 80027b4:	1c7b      	adds	r3, r7, #1
 80027b6:	d007      	beq.n	80027c8 <_strtol_l.isra.0+0x84>
 80027b8:	4584      	cmp	ip, r0
 80027ba:	d31c      	bcc.n	80027f6 <_strtol_l.isra.0+0xb2>
 80027bc:	d101      	bne.n	80027c2 <_strtol_l.isra.0+0x7e>
 80027be:	45a6      	cmp	lr, r4
 80027c0:	db19      	blt.n	80027f6 <_strtol_l.isra.0+0xb2>
 80027c2:	2701      	movs	r7, #1
 80027c4:	fb00 4006 	mla	r0, r0, r6, r4
 80027c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80027cc:	e7eb      	b.n	80027a6 <_strtol_l.isra.0+0x62>
 80027ce:	462f      	mov	r7, r5
 80027d0:	e7bf      	b.n	8002752 <_strtol_l.isra.0+0xe>
 80027d2:	2c2b      	cmp	r4, #43	; 0x2b
 80027d4:	bf04      	itt	eq
 80027d6:	1cbd      	addeq	r5, r7, #2
 80027d8:	787c      	ldrbeq	r4, [r7, #1]
 80027da:	461a      	mov	r2, r3
 80027dc:	e7c9      	b.n	8002772 <_strtol_l.isra.0+0x2e>
 80027de:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80027e2:	2b19      	cmp	r3, #25
 80027e4:	d801      	bhi.n	80027ea <_strtol_l.isra.0+0xa6>
 80027e6:	3c37      	subs	r4, #55	; 0x37
 80027e8:	e7e2      	b.n	80027b0 <_strtol_l.isra.0+0x6c>
 80027ea:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80027ee:	2b19      	cmp	r3, #25
 80027f0:	d804      	bhi.n	80027fc <_strtol_l.isra.0+0xb8>
 80027f2:	3c57      	subs	r4, #87	; 0x57
 80027f4:	e7dc      	b.n	80027b0 <_strtol_l.isra.0+0x6c>
 80027f6:	f04f 37ff 	mov.w	r7, #4294967295
 80027fa:	e7e5      	b.n	80027c8 <_strtol_l.isra.0+0x84>
 80027fc:	1c7b      	adds	r3, r7, #1
 80027fe:	d108      	bne.n	8002812 <_strtol_l.isra.0+0xce>
 8002800:	2322      	movs	r3, #34	; 0x22
 8002802:	4608      	mov	r0, r1
 8002804:	f8c8 3000 	str.w	r3, [r8]
 8002808:	f1ba 0f00 	cmp.w	sl, #0
 800280c:	d107      	bne.n	800281e <_strtol_l.isra.0+0xda>
 800280e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002812:	b102      	cbz	r2, 8002816 <_strtol_l.isra.0+0xd2>
 8002814:	4240      	negs	r0, r0
 8002816:	f1ba 0f00 	cmp.w	sl, #0
 800281a:	d0f8      	beq.n	800280e <_strtol_l.isra.0+0xca>
 800281c:	b10f      	cbz	r7, 8002822 <_strtol_l.isra.0+0xde>
 800281e:	f105 39ff 	add.w	r9, r5, #4294967295
 8002822:	f8ca 9000 	str.w	r9, [sl]
 8002826:	e7f2      	b.n	800280e <_strtol_l.isra.0+0xca>
 8002828:	2430      	movs	r4, #48	; 0x30
 800282a:	2e00      	cmp	r6, #0
 800282c:	d1af      	bne.n	800278e <_strtol_l.isra.0+0x4a>
 800282e:	2608      	movs	r6, #8
 8002830:	e7ad      	b.n	800278e <_strtol_l.isra.0+0x4a>
 8002832:	2c30      	cmp	r4, #48	; 0x30
 8002834:	d0a3      	beq.n	800277e <_strtol_l.isra.0+0x3a>
 8002836:	260a      	movs	r6, #10
 8002838:	e7a9      	b.n	800278e <_strtol_l.isra.0+0x4a>
	...

0800283c <strtol>:
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <strtol+0x24>)
 800283e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002840:	681c      	ldr	r4, [r3, #0]
 8002842:	4d08      	ldr	r5, [pc, #32]	; (8002864 <strtol+0x28>)
 8002844:	6a23      	ldr	r3, [r4, #32]
 8002846:	2b00      	cmp	r3, #0
 8002848:	bf08      	it	eq
 800284a:	462b      	moveq	r3, r5
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	4613      	mov	r3, r2
 8002850:	460a      	mov	r2, r1
 8002852:	4601      	mov	r1, r0
 8002854:	4620      	mov	r0, r4
 8002856:	f7ff ff75 	bl	8002744 <_strtol_l.isra.0>
 800285a:	b003      	add	sp, #12
 800285c:	bd30      	pop	{r4, r5, pc}
 800285e:	bf00      	nop
 8002860:	2000000c 	.word	0x2000000c
 8002864:	20000070 	.word	0x20000070

08002868 <__locale_ctype_ptr_l>:
 8002868:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800286c:	4770      	bx	lr
	...

08002870 <malloc>:
 8002870:	4b02      	ldr	r3, [pc, #8]	; (800287c <malloc+0xc>)
 8002872:	4601      	mov	r1, r0
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	f000 b815 	b.w	80028a4 <_malloc_r>
 800287a:	bf00      	nop
 800287c:	2000000c 	.word	0x2000000c

08002880 <__ascii_mbtowc>:
 8002880:	b082      	sub	sp, #8
 8002882:	b901      	cbnz	r1, 8002886 <__ascii_mbtowc+0x6>
 8002884:	a901      	add	r1, sp, #4
 8002886:	b142      	cbz	r2, 800289a <__ascii_mbtowc+0x1a>
 8002888:	b14b      	cbz	r3, 800289e <__ascii_mbtowc+0x1e>
 800288a:	7813      	ldrb	r3, [r2, #0]
 800288c:	600b      	str	r3, [r1, #0]
 800288e:	7812      	ldrb	r2, [r2, #0]
 8002890:	1c10      	adds	r0, r2, #0
 8002892:	bf18      	it	ne
 8002894:	2001      	movne	r0, #1
 8002896:	b002      	add	sp, #8
 8002898:	4770      	bx	lr
 800289a:	4610      	mov	r0, r2
 800289c:	e7fb      	b.n	8002896 <__ascii_mbtowc+0x16>
 800289e:	f06f 0001 	mvn.w	r0, #1
 80028a2:	e7f8      	b.n	8002896 <__ascii_mbtowc+0x16>

080028a4 <_malloc_r>:
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	1ccd      	adds	r5, r1, #3
 80028a8:	f025 0503 	bic.w	r5, r5, #3
 80028ac:	3508      	adds	r5, #8
 80028ae:	2d0c      	cmp	r5, #12
 80028b0:	bf38      	it	cc
 80028b2:	250c      	movcc	r5, #12
 80028b4:	2d00      	cmp	r5, #0
 80028b6:	4606      	mov	r6, r0
 80028b8:	db01      	blt.n	80028be <_malloc_r+0x1a>
 80028ba:	42a9      	cmp	r1, r5
 80028bc:	d903      	bls.n	80028c6 <_malloc_r+0x22>
 80028be:	230c      	movs	r3, #12
 80028c0:	6033      	str	r3, [r6, #0]
 80028c2:	2000      	movs	r0, #0
 80028c4:	bd70      	pop	{r4, r5, r6, pc}
 80028c6:	f000 f864 	bl	8002992 <__malloc_lock>
 80028ca:	4a21      	ldr	r2, [pc, #132]	; (8002950 <_malloc_r+0xac>)
 80028cc:	6814      	ldr	r4, [r2, #0]
 80028ce:	4621      	mov	r1, r4
 80028d0:	b991      	cbnz	r1, 80028f8 <_malloc_r+0x54>
 80028d2:	4c20      	ldr	r4, [pc, #128]	; (8002954 <_malloc_r+0xb0>)
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	b91b      	cbnz	r3, 80028e0 <_malloc_r+0x3c>
 80028d8:	4630      	mov	r0, r6
 80028da:	f000 f83d 	bl	8002958 <_sbrk_r>
 80028de:	6020      	str	r0, [r4, #0]
 80028e0:	4629      	mov	r1, r5
 80028e2:	4630      	mov	r0, r6
 80028e4:	f000 f838 	bl	8002958 <_sbrk_r>
 80028e8:	1c43      	adds	r3, r0, #1
 80028ea:	d124      	bne.n	8002936 <_malloc_r+0x92>
 80028ec:	230c      	movs	r3, #12
 80028ee:	4630      	mov	r0, r6
 80028f0:	6033      	str	r3, [r6, #0]
 80028f2:	f000 f84f 	bl	8002994 <__malloc_unlock>
 80028f6:	e7e4      	b.n	80028c2 <_malloc_r+0x1e>
 80028f8:	680b      	ldr	r3, [r1, #0]
 80028fa:	1b5b      	subs	r3, r3, r5
 80028fc:	d418      	bmi.n	8002930 <_malloc_r+0x8c>
 80028fe:	2b0b      	cmp	r3, #11
 8002900:	d90f      	bls.n	8002922 <_malloc_r+0x7e>
 8002902:	600b      	str	r3, [r1, #0]
 8002904:	18cc      	adds	r4, r1, r3
 8002906:	50cd      	str	r5, [r1, r3]
 8002908:	4630      	mov	r0, r6
 800290a:	f000 f843 	bl	8002994 <__malloc_unlock>
 800290e:	f104 000b 	add.w	r0, r4, #11
 8002912:	1d23      	adds	r3, r4, #4
 8002914:	f020 0007 	bic.w	r0, r0, #7
 8002918:	1ac3      	subs	r3, r0, r3
 800291a:	d0d3      	beq.n	80028c4 <_malloc_r+0x20>
 800291c:	425a      	negs	r2, r3
 800291e:	50e2      	str	r2, [r4, r3]
 8002920:	e7d0      	b.n	80028c4 <_malloc_r+0x20>
 8002922:	684b      	ldr	r3, [r1, #4]
 8002924:	428c      	cmp	r4, r1
 8002926:	bf16      	itet	ne
 8002928:	6063      	strne	r3, [r4, #4]
 800292a:	6013      	streq	r3, [r2, #0]
 800292c:	460c      	movne	r4, r1
 800292e:	e7eb      	b.n	8002908 <_malloc_r+0x64>
 8002930:	460c      	mov	r4, r1
 8002932:	6849      	ldr	r1, [r1, #4]
 8002934:	e7cc      	b.n	80028d0 <_malloc_r+0x2c>
 8002936:	1cc4      	adds	r4, r0, #3
 8002938:	f024 0403 	bic.w	r4, r4, #3
 800293c:	42a0      	cmp	r0, r4
 800293e:	d005      	beq.n	800294c <_malloc_r+0xa8>
 8002940:	1a21      	subs	r1, r4, r0
 8002942:	4630      	mov	r0, r6
 8002944:	f000 f808 	bl	8002958 <_sbrk_r>
 8002948:	3001      	adds	r0, #1
 800294a:	d0cf      	beq.n	80028ec <_malloc_r+0x48>
 800294c:	6025      	str	r5, [r4, #0]
 800294e:	e7db      	b.n	8002908 <_malloc_r+0x64>
 8002950:	200001fc 	.word	0x200001fc
 8002954:	20000200 	.word	0x20000200

08002958 <_sbrk_r>:
 8002958:	b538      	push	{r3, r4, r5, lr}
 800295a:	2300      	movs	r3, #0
 800295c:	4c05      	ldr	r4, [pc, #20]	; (8002974 <_sbrk_r+0x1c>)
 800295e:	4605      	mov	r5, r0
 8002960:	4608      	mov	r0, r1
 8002962:	6023      	str	r3, [r4, #0]
 8002964:	f7fe f810 	bl	8000988 <_sbrk>
 8002968:	1c43      	adds	r3, r0, #1
 800296a:	d102      	bne.n	8002972 <_sbrk_r+0x1a>
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	b103      	cbz	r3, 8002972 <_sbrk_r+0x1a>
 8002970:	602b      	str	r3, [r5, #0]
 8002972:	bd38      	pop	{r3, r4, r5, pc}
 8002974:	20000430 	.word	0x20000430

08002978 <__ascii_wctomb>:
 8002978:	b149      	cbz	r1, 800298e <__ascii_wctomb+0x16>
 800297a:	2aff      	cmp	r2, #255	; 0xff
 800297c:	bf8b      	itete	hi
 800297e:	238a      	movhi	r3, #138	; 0x8a
 8002980:	700a      	strbls	r2, [r1, #0]
 8002982:	6003      	strhi	r3, [r0, #0]
 8002984:	2001      	movls	r0, #1
 8002986:	bf88      	it	hi
 8002988:	f04f 30ff 	movhi.w	r0, #4294967295
 800298c:	4770      	bx	lr
 800298e:	4608      	mov	r0, r1
 8002990:	4770      	bx	lr

08002992 <__malloc_lock>:
 8002992:	4770      	bx	lr

08002994 <__malloc_unlock>:
 8002994:	4770      	bx	lr
	...

08002998 <_init>:
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299a:	bf00      	nop
 800299c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800299e:	bc08      	pop	{r3}
 80029a0:	469e      	mov	lr, r3
 80029a2:	4770      	bx	lr

080029a4 <_fini>:
 80029a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029a6:	bf00      	nop
 80029a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029aa:	bc08      	pop	{r3}
 80029ac:	469e      	mov	lr, r3
 80029ae:	4770      	bx	lr
